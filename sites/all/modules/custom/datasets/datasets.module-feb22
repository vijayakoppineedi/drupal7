<?php

/**
 * @file
 * A dataset module creates various forms and saves the data in database as 
 * well in flat csv files
 */
 
//define('FROM_ADDRESS', '"NAL-i5k"<i5k@ars.usda.gov>');
//define('FROM_ADDRESS', 'vijaya.itsme@gmail.com');

/**
 * Implementation of hook_menu().
 */
function datasets_menu() {
  $items = array();
  
  $items['datasets/mapped'] = array(
    'title' => 'Dataset Form',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mapped_dataset'),    
    'access arguments' => array('access datasets'),
    'type' => MENU_CALLBACK,
    'weight' => 100,
  );
  
  $items['datasets/add-organism'] = array(
    'title' => 'Request Organism',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('add_organism'),    
    'access arguments' => array('access datasets'),
    'type' => MENU_CALLBACK,
    'weight' => 100,
  );
  
  $items['datasets/assembly-data'] = array(
    'title' => 'Add Organism Assembly Information',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('assembly_data'),    
    'access arguments' => array('access datasets'),
    'type' => MENU_CALLBACK,
    'weight' => 100,
  );
  
  $items['datasets/gene-prediction'] = array(
    'title' => 'Add Gene Prediction Information',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gene_prediction'),    
    'access arguments' => array('access datasets'),
    'type' => MENU_CALLBACK,
    'weight' => 100,
  );
  

  $items['admin/structure/datasets'] = array(
    'title' => 'Datasets',
    'description' => 'List of Organism\'s for approve/reject',
    'page callback' => 'dataset_cordinator_organisms',	   
    'access arguments' => array('administer datasets'),		
    'file' => 'datasets.admin.inc',
  );
  
  $items['admin/structure/datasets/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10
  );  

  $items['admin/structure/datasets/report'] = array(
    'title' => 'Datasets Report',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dataset_report'),
    'access arguments' => array('administer datasets'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'datasets.admin.inc',
  );

  $items['datasets_og/%/view'] = array(
    'title' => 'View assembly information',
    'page callback' => 'assembly_information_view',
    'page arguments' => array(1),  
    'access arguments' => array('administer datasets'),		
    'type' => MENU_CALLBACK,
    'file' => 'datasets.admin.inc',
  );  
 
  $items['datasets_gp/%/view'] = array(
    'title' => 'View Gene prediction Information',
    'page callback' => 'gene_prediction_view',
    'page arguments' => array(1),
    'access arguments' => array('administer datasets'),
    'type' => MENU_CALLBACK,
    'file' => 'datasets.admin.inc',
  );
 
   $items['datasets_md/%/view'] = array(
    'title' => 'View Mapped dataset information',
    'page callback' => 'mapped_dataset_view',
    'page arguments' => array(1),
    'access arguments' => array('administer datasets'),
    'type' => MENU_CALLBACK,
    'file' => 'datasets.admin.inc',
  );
 
  $items['datasets/organism/%/edit'] = array(
    'title' => 'Approve or Reject the requested organism',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('datasets_organism_approval', 2),  
    'access arguments' => array('administer datasets'),		
    'type' => MENU_CALLBACK,
    'file' => 'datasets.admin.inc',
  );
  
  return $items;
}
/**
 * Implements hook_permission().
 */
function datasets_permission() {
  return array(
    'administer datasets' => array(
      'title' => t('Administer datasets'),
    ),
	'access datasets' => array(
      'title' => t('Access datasets'),
    ),
  );
}

/**
 *  hook_form() Form to create mapped dataset
 */
function mapped_dataset($form, &$form_state) {
  // Because we have many fields with the same values, we have to set
  // #tree to be able to access them.
  //$form['#tree'] = TRUE;
  
  $form['#attached']['css'] = array(
    drupal_get_path('module', 'datasets') . '/css/dataset.css',
  );
  
  $web_apollo_organism = variable_get('web_apollo_organism');
  if(!empty($web_apollo_organism)) {    
    $organism_options = get_webapollo_organisms($web_apollo_organism); 
  }
   
  $form['organism'] = array(
    '#type' => 'select',
    '#title' => t('Organism'),
    '#options' => $organism_options,
    '#multiple' => FALSE,
    '#required' => TRUE,	
  );
 
  // To make the fieldset collapsible
  $form['data_provider'] = array(
    '#type' => 'fieldset',
    '#title' => t('Data provider'),
    '#collapsible' => TRUE, // Added
    '#collapsed' => FALSE,  // Added
  );
  
 $form['data_provider']['name'] = array(
    '#type' => 'textfield', 
    '#title' => t('Full Name'),    
    '#maxlength' => 255,
    '#required' => TRUE,
  );
  
  $form['data_provider']['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email Address'),
    '#maxlength' => 255,
    '#required' => TRUE,
  );
  
  $form['data_provider']['affiliation'] = array(
    '#type' => 'textfield',
    '#title' => t('Affiliation'),
    '#required' => TRUE,
  );  
  
  $form['geo_location'] = array(
    '#type' => 'textfield',
    '#title' => t('Geo location'),
    '#required' => FALSE,
	'#description' => "Geographical localtion of specimen collection (Country, Site, Latitude, Longitude)",	
  );
  $form['tissues_located'] = array(
    '#type' => 'textfield',
    '#title' => t('Tissues/Life stage<br> included'),	
    '#required' => FALSE,
	'#description' => "<br>(Whole individual/ antenna / pooled larva / pooled adult female/ etc.)",	
  );
  
  $gender_options = Array( '' => 'Select',
			   'Female' => 'Female',
                           'Male' => 'Male', 
			   'Pooled' => 'Pooled',
			   'NA' => 'Other/NA',
                           );
  $gender_selected = isset($form_state['values']['data_gender']) ? $form_state['values']['data_gender'] : key($gender_options);
  $form['gender'] = array(
    '#type' => 'select',
    '#options' => $gender_options, 
    '#title' => t('Sex'),
    '#default_value' => $gender_selected,
    '#ajax' => array(      
      'callback' => 'gender_dropdown_callback',
      'wrapper' => 'gender_textfield',
    ),
    '#limit_validation_errors' => array(),		
    '#required' => FALSE	
  );
    
  $form['gender_textfield'] = array(
    '#prefix' => '<div id="gender_textfield">',
    '#suffix' => '</div>',
    '#type' => 'fieldset',    
  );

  if (isset($form_state['input']['gender']) && ($form_state['input']['gender'] == 'NA')) { 	
    $form['gender_textfield']['other_gender'] = array(
      '#type' => 'textfield',
      '#title' => t('Other/NA (Sex)'),	  
    );
  }  
  
  $form['sequence_platform'] = array(
    '#type' => 'textfield',
    '#title' => t('Sequencing platform and version'),	
    '#required' => FALSE,
	'#description' => "(Illumina Hi-Seq 200 bp)",	
  );  
  $publish_options = Array('' => 'Select', 
			   'Yes' => 'Yes',
                           'No' => 'No'); 
  $selected = isset($form_state['values']['is_publish']) ? $form_state['values']['is_publish'] : key($publish_options);
  
  $form['is_publish'] = array(
    '#type' => 'select',
    '#options' => $publish_options, 
    '#title' => t('Are the data published?'),
    '#default_value' => $selected,
    '#ajax' => array(      
      'callback' => 'data_publish_dropdown_callback',
      'wrapper' => 'publish',
    ),		
    '#required' => TRUE	
  );
    
  $form['publish'] = array(
    '#prefix' => '<div id="publish">',
    '#suffix' => '</div>',
    '#type' => 'fieldset',    
  );

  // Since dropdown return TRUE or FALSE, we have to check that
  // $form_state has been filled as well as what it contains.
  if (!empty($form_state['input']['is_publish']) && isset($form_state['input']['is_publish'])) {      
    $description = ($form_state['input']['is_publish'] == 'Yes')? t('please provide citation'):t('please indicate whether Toronto/Ft. Lauderdale conditions of data re-use should apply');	
    $publish_title = 'publish_field_data';	
    $form['publish'][$publish_title] = array(
      '#type' => 'textfield',
      '#title' => t('If ').$form_state['input']['is_publish'],
      '#description' => $description
    );
  } 
  // To make the fieldset collapsible
  $form['analysis_method'] = array(
    '#type' => 'fieldset',
    '#title' => t('Analysis Method'),
    '#collapsible' => TRUE, // Added
    '#collapsed' => FALSE  // Added
  );
  $form['analysis_method']['descriptive_track'] = array(
    '#type' => 'textfield',
    '#title' => t('Descriptive track<bR> name'),
    '#required' => TRUE,
    '#description' => "<Br>(this is what the users will see in Web Apollo, so short yet explanatory is best)",	
  );  
  
  $form['analysis_method']['data_source_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Data source URL'),
    '#required' => FALSE,
  );   
  $form['analysis_method']['program'] = array(
    '#type' => 'textfield',
    '#title' => t('Program'),	
    '#required' => TRUE	
  );
  $form['analysis_method']['version'] = array(
    '#type' => 'textfield',
    '#title' => t('version'),	
    '#required' => TRUE	
  );
  $form['analysis_method']['additional_info'] = array(
    '#type' => 'textfield',
    '#title' => t('Additional Information'),	
    '#description' => t('Special settings or parameters used.'),
    '#required' => FALSE
  );
  
  $form['analysis_method']['dataset_entry'] = array(
    '#type' => 'fieldset',
    '#title' => t('Other Methods'),
    '#prefix' => '<div id="entry-fieldset-wrapper">',
    '#suffix' => '</div>',
  );

  if (empty($form_state['pnum_methods'])) {
    $form_state['pnum_methods'] = 1;
  }

  for ($i = 0; $i < $form_state['pnum_methods']; $i++) {
    $form['analysis_method']['dataset_entry']['other_methods_'.$i] = array(
	'#type' => 'textfield',
        '#title' => '',
        '#size' => 22,
        '#description' => t('Such as adapter-trimming, barcoding, QC, etc'),
        '#attributes' => array('multiple' => 'multiple'),
    );
  }

  $form['analysis_method']['dataset_entry']['add_other_methods'] = array(
    '#type' => 'submit',
    '#value' => t('Add more method'),
    '#submit' => array('methods_add_more_add_one'),
    '#ajax' => array(
      'callback' => 'methods_add_more_callback',
      'wrapper' => 'entry-fieldset-wrapper',
    ),
    '#limit_validation_errors' => array(), // No elements will be validated
  );
  if ($form_state['pnum_methods'] > 1) {
    $form['analysis_method']['dataset_entry']['remove_other_methods'] = array(
		'#type' => 'submit',
		'#value' => t('Remove the latest method'),
		'#submit' => array('methods_remove_latest_one'),
		'#ajax' => array(
			'callback' => 'methods_add_more_callback',
			'wrapper' => 'entry-fieldset-wrapper',
		),
		'#limit_validation_errors' => array(), // No elements will be validated
	);
  } 
  $form['upload_entry'] = array(
    '#type' => 'fieldset',
    '#title' => t('if uploading to our ftp site, md5sum for each data file'),
	'#prefix' => '<div id="upload-fieldset-wrapper">',
    '#suffix' => '</div>',
	'#collapsible' => TRUE, // Added
    '#collapsed' => FALSE,  // Added
  );

  if (empty($form_state['pnum_upload'])) {
    $form_state['pnum_upload'] = 1;
  }

  for ($i = 0; $i < $form_state['pnum_upload']; $i++) {    
    //Parent container
    $form['upload_entry']['upload_wrapper'][$i] = array(
    '#prefix' => '<div class="two-col">',
    '#suffix' => '</div>'
    );
	$flag = ($i == 0)?TRUE:FALSE;
    $form['upload_entry']['upload_wrapper']['filename_'.$i] = array(
		'#type' => 'textfield',
        '#title' => 'Filename',
        '#maxlength' => 255,       
        '#prefix' => '<div class="f_class">',
	   	'#suffix' => '</div>',	
		'#required' => $flag,
        '#attributes' => array('multiple' => 'multiple'),
    );
	$form['upload_entry']['upload_wrapper']['md5sum_'.$i] = array(
		'#type' => 'textfield',
        '#title' => 'md5sum',
		'#prefix' => '<div class="m_class">',
	   	'#suffix' => '</div>',
        '#maxlength' => 255,	
		'#required' => $flag,		
		'#attributes' => array('multiple' => 'multiple'),
    );
  }

  $form['upload_entry']['add_other_uploads'] = array(
    '#type' => 'submit',
    '#value' => t('Add another file'),
    '#submit' => array('upload_add_more_add_one'),
    '#ajax' => array(
        'callback' => 'upload_add_more_callback',
        'wrapper' => 'upload-fieldset-wrapper',
    ),
	'#limit_validation_errors' => array(), // No elements will be validated
  );
  if ($form_state['pnum_upload'] > 1) {
	$form['upload_entry']['remove_other_uploads'] = array(
		'#type' => 'submit',
		'#value' => t('Remove latest one'),
		'#submit' => array('upload_remove_latest_one'),
		'#ajax' => array(
			'callback' => 'upload_add_more_callback',
			'wrapper' => 'upload-fieldset-wrapper',
		),
		'#limit_validation_errors' => array(), // No elements will be validated
  );
  }
  
  // Enabling honeypot to avoid spam
  honeypot_add_form_protection($form, $form_state, array('honeypot', 'time_restriction'));
  $form['captcha'] = array(
    '#type' => 'captcha',
    '#captcha_type' => 'datasets/Math',
  );


  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  
  return $form;
}

/**
 * mapped dataset form validation
 *
 * Data provider name, affiliation should enter only letters @ - _.
 * Email validation
 * Data source url validation
 *
 */
function mapped_dataset_validate($form, &$form_state) {
  $values = $form_state['values'];
// echo "<prE>"; print_r($values);echo "</prE>";exit;
  $name = $values['name'];
  if (!preg_match('!^[\w @-]*$!', $name)){
     form_set_error('name', t('Your Name can only contains numbers, letters @  - _.'));
  }
  if (isset($values['email']) && !valid_email_address($values['email'])) {
    form_set_error('email', t('You must enter a valid e-mail address.'));
  }
  $affiliation = $values['affiliation'];
  if (!preg_match('!^[\w @-]*$!', $affiliation)){
     form_set_error('affiliation', t('Your 
	 Affiliation can only contains numbers, letters @  - _.'));
  }
 if(!empty($values['is_publish']) && empty($values['publish_field_data'])) {
    form_set_error('publish_field_data', t('Enter the reason for assembly published.'));
  }

  if(!empty($values['gender']) && ($values['gender'] == 'NA') && empty($values['other_gender'])) {
    form_set_error('other_gender', t('Enter the other sex field value.'));
  }
 
 
  if (!empty($values['data_source_url']) && !valid_url($values['data_source_url'], 'TRUE')) {
    form_set_error('data_source_url', t('You must enter a valid url.'));
  }
 
  foreach($values as $key => $value) {
    if(preg_match('/^filename_/', $key, $match)) {
      if(!preg_match('!^[\w .-]*$!', $value)) {
        form_set_error($key, t('Your filename can only contains numbers, letters -_.'));
      }

      $file = explode('_',$key);
      $file_name = 'filename_'.$file[1];
      $md5_sum = 'md5sum_'.$file[1];
      if(!empty($values[$file_name]) && empty($values[$md5_sum])) {
        form_set_error($md5_sum, t('You must enter md5sum '.($file[1]+1).'.'));
      }
    }
    if(preg_match('/^md5sum_/', $key, $match)) {
      if(!preg_match('!^[\w .-]*$!', $value)) {
        form_set_error($key, t('Your md5sum can only contains numbers, letters -_.'));
      }
      $md5_key = explode('_', $key);
      if(empty($values['filename_'.$md5_key[1]]) && !empty($values['md5sum_'.$md5_key[1]])) {
        form_set_error('filename_'.$md5_key[1], t('You must enter filename '.($md5_key[1]+1).'.'));
      }
    }

    if(preg_match('/^other_methods_/', $key, $match_methods)) {
      if(!preg_match('!^[\w -]*$!', $value)) {
        form_set_error($key, t('Your other methods field can only contains numbers, letters -_.'));
      }
    }
  } //foreach loop close
}

/**
 * hook_form submit
 */
function mapped_dataset_submit($form, &$form_state) {
// echo "<pre>"; print_r($form_state['values']);echo "</prE>";
  
  $values = $form_state['values'];

  $timestamp = time();

  // Get the organism fullname rather than short name 
  /*$annotation = 1;
  $web_apollo_organism = variable_get('web_apollo_organism');
  $organism_data = get_webapollo_organisms($web_apollo_organism, $annotation); */

  $web_apollo_organism = variable_get('web_apollo_organism');
  if(!empty($web_apollo_organism)) {
    $organism_list = get_webapollo_organisms($web_apollo_organism);
  }

  $exclude_fields = Array('i5kurl', 'honeypot_time', 'add_other_methods', 'remove_other_methods', 'add_other_uploads', 'remove_other_uploads', 'submit', 'form_build_id', 'form_token', 'form_id', 'op','captcha_token','captcha_sid', 'captcha_response', 'i5kurl', 'honeypot_time','captcha');
  $names_col = Array();
  $values_col = Array();
  $created = time(); $other_methods = ''; $filename = ''; $md5sum = '';

  foreach($values as $key => $value) {
    if(!in_array($key, $exclude_fields)) {
      if(preg_match('/^other_methods_/', $key)) {
        $other_methods .= $value.",";
      }
      else if(preg_match('/^filename_/', $key)) {
        $filename .= $value.",";
      }
      else if(preg_match('/^md5sum_/', $key)) {
        $md5sum .= $value.",";
      }
      else if(isset($value) && !empty($value)){
       array_push($names_col, $key);
       array_push($values_col, "'".$value."'");
      }
    }
  }
  $other_methods = rtrim($other_methods, ',');
  $filename = rtrim($filename, ',');
  $md5sum = rtrim($md5sum, ',');
  array_push($names_col, 'other_methods');
  array_push($values_col, "'".$other_methods,"'");
  array_push($names_col, 'filename');
  array_push($values_col, "'".$filename."'");
  array_push($names_col, 'md5sum');
  array_push($values_col, "'".$md5sum."'");
  array_push($names_col, 'created');
  array_push($values_col, $created);

  $names = implode(',', $names_col);
  $data = implode(',', $values_col);

  //echo "insert into public.ds_mapped_dataset($names) values($data)";exit;
  db_query("insert into public.ds_mapped_dataset($names) values($data)");
 
  
  // E-mail address of the sender: as the form field is a text field.
  $from = FROM_ADDRESS;
  $to_address = $values['email'];
  $values['organism'] = $organism_list[$values['organism']];

//echo "param <pre>"; print_r($values);echo "</prE>";exit;
  // Send the e-mail to the recipients using the site default language.
  $sent =  drupal_mail('datasets', 'mapped_dataset_email', $to_address, language_default(), $values, $from, TRUE);

  if(empty($sent['result']) || ($sent['result'] != 1)) {
    /*handle send fail, $sent ===false when mail fails, but it won't always recognize a failure*/
    drupal_set_message(t('Failed to send e-mail.'));
  } else
    drupal_set_message(t('Your mapped dataset data was submitted successfully. For your reference we are sending out an email with the fields filled.'));


}
// ---------------  AJAX CALLBACK  FUNCTIONS FOR TEXT FIELD-----------------
function data_publish_dropdown_callback($form, $form_state) {
  return $form['publish'];
}

function gender_dropdown_callback($form, $form_state) {
 return $form['gender_textfield'];  
}

/**
 * Other methods callbacks
 */
function methods_add_more_add_one($form, &$form_state) {
    if (!isset($form_state['pnum_methods'])) {
        $form_state['pnum_methods'] = 0;
        $form_state['pnum_methods']++;
    }

    $form_state['pnum_methods']++;
    $form_state['rebuild'] = TRUE;
}

function methods_add_more_callback($form, $form_state) {
    return $form['analysis_method']['dataset_entry'];
}

function methods_remove_latest_one($form, &$form_state) {
  if ($form_state['pnum_methods'] > 1) {
    $form_state['pnum_methods']--;
  }
  $form_state['rebuild'] = TRUE;
}

/**
 * Upload filename and md5sum callbacks
 */
function upload_add_more_add_one($form, &$form_state) {
    if (!isset($form_state['pnum_upload'])) {
        $form_state['pnum_upload'] = 0;
        $form_state['pnum_upload']++;
    }

    $form_state['pnum_upload']++;
    $form_state['rebuild'] = TRUE;
}

function upload_add_more_callback($form, $form_state) {
    return $form['upload_entry'];
}

function upload_remove_latest_one($form, &$form_state) {
  if ($form_state['pnum_upload'] > 1) {
    $form_state['pnum_upload']--;
  }
  $form_state['rebuild'] = TRUE;
}
/**
 * hook_form_alter
 * 
 * Organise captcha field to be right above the submit button 
 */
function datasets_form_alter(&$form, &$form_state, $form_id) { 
}

/**
 * Default implementation of hook_captcha().
 */
function datasets_captcha($op, $captcha_type = '') {
  $result = captcha_captcha($op, $captcha_type);  
  
    if (($op == 'generate') && ($captcha_type == 'Math')) {
      $result = array();
      $answer = mt_rand(1, 20);
      $x = mt_rand(1, $answer);
      $y = $answer - $x;
      $result['solution'] = "$answer";
  
      // Build challenge widget.
      // Note that we also use t() for the math challenge itself. This makes
      // it possible to 'rephrase' the challenge a bit through localization
      // or string overrides.
      $result['form']['captcha_response'] = array(
        '#type' => 'textfield',
        '#title' => t('Math question'),
        '#description' => t('Solve this simple math problem and enter the result to help us reduce spam. E.g. for 1+3, enter 4.'),
        '#field_prefix' => t('@x + @y = ', array('@x' => $x, '@y' => $y)),
        '#size' => 4,
        '#maxlength' => 2,
        '#required' => TRUE,
      );
       
    }
  return $result;
}

/**
 * hook_form 
 * - Creates add organism form
 * - Save the data in public schema cordinator_organism table
 */
function add_organism($form, &$form_state) {

  $form['#attached']['css'] = array(
    drupal_get_path('module', 'datasets') . '/css/add_organism.css',
  );

  $form['genus'] = array(
    '#type' => 'textfield', 
    '#title' => t('Genus'),    
    '#maxlength' => 255,
    '#required' => TRUE,
  );
  
  $form['species'] = array(
    '#type' => 'textfield',
    '#title' => t('Species'),
    '#maxlength' => 255,
    '#required' => TRUE,
  );
  
  $form['common_name'] = array(
    '#type' => 'textfield',
    '#title' => t('common_name'),
    '#required' => TRUE,
  );  
  
  $form['ncbi_taxid'] = array(
    '#type' => 'textfield',
    '#title' => t('NCBI tax id'),
    '#required' => TRUE,
  );
  
  $form['cordinator_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Co-ordinator Name'),
    '#required' => TRUE,
  ); 
  
  $form['email'] = array(
    '#type' => 'textfield',
    '#title' => t('email'),
    '#required' => TRUE,
  );
  $form['comments'] = array(
    '#type' => 'textarea',
    '#title' => t('comments'),
    '#required' => TRUE,
  );

  // Enabling honeypot to avoid spam
  honeypot_add_form_protection($form, $form_state, array('honeypot', 'time_restriction'));
 
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  
  return $form;
}

/**
 * hook_form_validation
 *
 * Email validation
 * taxid is unique for each organism
 */
function add_organism_validate($form, &$form_state) {
  if (!valid_email_address($form_state['values']['email'])) {
    form_set_error('email', t('You must enter a valid e-mail address.'));
  }
  
  //Checking the taxid and email to be unique
  if(!empty($form_state['values']['ncbi_taxid'])) {
    $check_for_unique_entry = db_query('SELECT id, genus, species, taxid from {ds_cordinator_organism} where taxid=:taxid', array(':taxid' => $form_state['values']['ncbi_taxid']) );	
    foreach($check_for_unique_entry as $item) {
      if($item->taxid)
        form_set_error('taxid', t('This taxid "'.$item->taxid.'" for the organism "'.$item->genus.' '.$item->species.'" already exists.'));
    }
  }  
}

/**
 * hook_form_submit
 * 
 */
function add_organism_submit($form, &$form_state) {
   $values = $form_state['values'];
  // echo "<pre>"; print_r($values);echo "</pre>";exit;

   $created = time();   
   // data variable is used to send values to mail message
   $data = Array(
        'genus' => $values['genus'],
        'species' => $values['species'],
        'common_name' => $values['common_name'],
        'taxid' => $values['ncbi_taxid'],
        'cordinator_name' => $values['cordinator_name'],
        'email' => $values['email'],
        'comments' => trim($values['comments']),
        'created' => $created
      );

  /* $names = Array('genus','species','common_name','taxid','cordinator_name' , 'email','comments','created');
   $val = Array("'".$values['genus']."'", "'".$values['species']."'", "'".$values['common_name']."'", $values['ncbi_taxid'], "'".$values['cordinator_name']."'", "'".$values['email']."'", "'".$values['comments']."'", $created);
   $names = implode(",", $names);
   $val = implode(",",array_values($val));*/
   // echo "insert into ds_cordinator_organism($names) values($val)";exit;
	
  //   drupal_write_record('ds_cordinator_organism', $data); 
  db_insert('ds_cordinator_organism')
      ->fields($data)->execute() or die("unable to insert data");
	// Send the e-mail to the recipients using the site default language.
    $recipient = FROM_ADDRESS;
    $from = $values['email'];
    $sent =  drupal_mail('datasets', 'organism_request_email', $recipient, language_default(), $data, $from, TRUE);
    if(empty($sent['result']) || ($sent['result'] != 1)) {
      /*handle send fail, $sent ===false when mail fails, but it won't always recognize a failure*/
      drupal_set_message(t('Failed to send e-mail.'));
    }
    else {
      drupal_set_message("Organism request '".$values['genus']." ".$values['species']."' successfully created, you will receive an email once the request approved from an administrator."); 
    }	
}

/**
 * drupal mail looks for a function that matches the first parameter _ mail
 * to build the message
 */		
function datasets_mail($key, &$message, $params) {
  $language = $message['language'];
  $variables = array(    
    '!organism' => $params['genus'].' '.$params['species'],  
    '!user' => $params['cordinator_name'],
    '!form' => url($_GET['q'], array('absolute' => TRUE)),
  );

  $other_methods = ''; $filename_md5sum = '';
  foreach($params as $keyname => $value) {
    if(preg_match('/^other_methods_/', $keyname)) {
      $other_methods .= $value.",";
    }
    else if(preg_match('/^filename_/', $keyname)) {
      $filename_md5sum .= "Filename: ".$value."<br>";
    }
    else if(preg_match('/^md5sum_/', $keyname)) {
      $filename_md5sum .= "md5sum: ".$value."<br><br>";
    }
  }

  $other_methods = rtrim($other_methods, ',');   

  switch($key) {
    //switching on $key lets you create variations of the email based on the $key parameter
    case 'organism_request_email':
      $message['subject'] = t('Organism request for "!organism"', $variables, array('langcode' => $language->language)); 
      //$variabless required even if not used to get $language in there

      //the email body is here, inside the $message array	  
      $message['body'][] = t("!user requested for new organism.<br><br><b>Below are the details:</b>", $variables, array('langcode' => $language->language));	 
      $message['body'][] = '<br><b>Genus:</b> '.$params['genus'].'
                            <br><b>Species: </b>'.$params['species'].'
                            <Br><b>Common name: </b>'.$params['common_name'].'
			    <br><b>TaxId:</b> '.$params['taxid'].'
                            <br><b>Co-ordinator name: </b>'.$params['cordinator_name'].'
                            <bR><b>Email: </b>'.$params['email'].'
                            <br><b>Comments:</b> '.$params['comments'];
      $message['body'][] = "<br><br>To view more click the <a href='".$GLOBALS['base_url']."/admin/structure/datasets'>Admin</a> Link";

      $message['body'][] = '<br><BR>Regards,<br><bR>The NAL i5k team';
	
      $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
 
      break;
    case 'organism_approved_email':
      $message['subject'] = t('Organism Approved for "!organism"', $variables, array('langcode' => $language->language));
      $message['body'][] = "Dear ".$params['name'].", <br><br>We have approved your Organism request for ".$params['genus']." ".$params['species']."."; 
      $message['body'][] = '<br>Now you can submit your datasets. <Br><br>Regards,<br><bR>The NAL i5k team';
      $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
      break;
    case 'mapped_dataset_email':      
      $message['subject'] = t('Mapped dataset for '.$params['organism'], $variables, array('langcode' => $language->language));	
      $message['body'][] = t("Dear ".$params['name'].", <br><br> Thank you for submmiting the mapped dataset for ".$params['organism'].".", $variables, array('langcode' => $language->language));    

      $message['body'][] = "<h1>Submission details:</h1>"; 
      $message_body = "<b>Data Provider:</b><br>";
      $message_body .= "Name: ".$params['name']."<br>";
      $message_body .= "Email: ".$params['email']."<br>";
      $message_body .= "Affiliation: ".$params['affiliation']."<br><br>";
      if(!empty($params['geo_location']))
        $message_body .= "Geo Location: ".$params['geo_location']."<br>";
      if(!empty($params['tissues_located']))
        $message_body .= "Tissues Located: ".$params['tissues_located']."<br>";
      if(!empty($params['gender'])) {
        $message_body .= "Sex: ".$params['gender']."<br>";
        if(!empty($params['gender']) && ($params['gender'] == 'NA')) 
          $message_body .= "Other/NA (Sex): ".$params['other_gender']."<br>";
      }
      if(!empty($params['sequence_platform']))
        $message_body .= "Sequence Platform: ".$params['sequence_platform']."<br>";
      $message_body .= "Are the data published?: ".$params['is_publish']."<br>";
      $message_body .= "If ".$params['is_publish'].": ".$params['publish_field_data']."<br><br>";
      $message_body .= "<b>Analysis Method:</b><br>";
      $message_body .= "Descriptive track name: ".$params['descriptive_track']."<br>";
      if(!empty($params['data_source_url']))
        $message_body .= "Data source URL: ".$params['data_source_url']."<br>";
      $message_body .= "Program: ".$params['program']."<br>";
      $message_body .= "version: ".$params['version']."<br>";
      if(!empty($params['additional_info']))
        $message_body .= "Additional Information: ".$params['additional_info']."<br>";
      if(!empty($other_methods)) 
        $message_body .= "Other Methods: ".$other_methods."<br>";
	  
      $message_body .= "<br><b>Filename & md5sum:</b><br>";
	  
      $message_body .= $filename_md5sum."<br>";
  
      $message['body'][] = $message_body;
      $message['body'][] = '<Br><br>Regards,<br><bR>The NAL i5k team';
      $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
      break;
    case 'assembly_dataset_email':      
      $message['subject'] = t('Assembly dataset for '.$params['organism'], $variables, array('langcode' => $language->language));	
      $message['body'][] = t("Dear ".$params['name'].", <br><br> Thank you for submmiting the assembly dataset for ".rtrim($params['organism']).".", $variables, array('langcode' => $language->language));    

      $message['body'][] = "<h1>Submission details:</h1>"; 
      $message_body .= "<b>Genome Co-ordinator information:</b><br>";
      $message_body .= "Name: ".$params['name']."<br>";
      $message_body .= "Email: ".$params['email']."<br><br>";
      $message_body .= "<b>Project Background:</b><bR>";
      $message_body .= "NCBI tax id: ".$params['taxid']."<br>";      
      $message_body .= "Organism: ".$params['organism']."<bR>";
      $message_body .= "Common name: ".$params['common_name']."<br>";
      $message_body .= "Is another genome portal already hosting this assembly? ".$params['is_portal']."<bR>";

      if(isset($params['is_portal']) && ($params['is_portal'] == 'Yes'))
        $message_body .= "Explain reason:  ".$params['portal_yes']."<bR>";

      $message_body .= "Will you manually curate this assembly using i5k workspace tools? ".$params['is_curate_assembly']."<bR>";
      if(isset($params['is_curate_assembly']) && $params['is_curate_assembly'] == 'Yes') {
        $message_body .= "Co-ordinator name: ".$params['manual_curation_name']."<bR>";
        $message_body .= "Co-ordinator Email: ".$params['manual_curation_email']."<bR>";
        $message_body .= "Do you need assistance developing an OGS? ".$params['need_assistance']."<bR>";
        if(isset($params['need_assistance']) && ($params['need_assistance'] == 'Yes'))
          $message_body .= "Reason: ".$params['reason']."<bR>";

        $message_body .= "<b>Curation time frame:</b><br>";
        $message_body .= "From Date: ".$params['time_from']."<bR>";
        $message_body .= "To Date: ".$params['time_to']."<bR>";
      }
      $message_body .= "<Br><b>Project Information</b><bR>";
      $message_body .= "Project description for your organism page: ".$params['description']."<bR>";
      if(!empty($params['organism_image_url']))
        $message_body .= "Image for your organism page: ".$params['organism_image_url']."<bR>";
      $message_body .= "<h3>Genome assembly information:</h3>";
      $message_body .= "<b>Assembly Information:</b><bR>";
      $message_body .= "Assembly name: ".$params['assembly_name']."<bR>";
      $message_body .= "Assembly version: ".$params['assembly_version']."<bR>";
      $message_body .= "NCBI/INSDC Genome assembly accession#: ".$params['assembly_accession']."<bR>";
      $message_body .= "Analysis method: ".$params['assembly_method']."<bR>";
      $message_body .= "Is the assembly published: ".$params['is_publish']."<bR>";
      if(isset($params['is_publish']))
        $message_body .= "IF ".$params['is_publish'].":".$params['publish_field_data']."<bR>";
      if(!empty($params['other_notes']))
        $message_body .= "Other notes: ".$params['other_notes']."<bR>";

      $message_body .= "<b>Data source information</b><br>";

      if(!empty($params['geo_location']))
        $message_body .= "Geo Location: ".$params['geo_location']."<br>";

      if(!empty($params['tissues_located']))
        $message_body .= "Tissues Located: ".$params['tissues_located']."<br>";

      if(!empty($params['gender'])) {
        $message_body .= "Sex: ".$params['gender']."<br>";
        if(isset($params['gender']) && $params['gender'] == 'NA')
          $message_body .= "Other/NA: ".$params['other_gender']."<br>";
      }
      if(!empty($params['data_source_strain']))
        $message_body .= "Strain: ".$params['data_source_strain']."<br>";

      if(!empty($params['data_source_notes']))
        $message_body .= "Other notes: ".$params['data_source_notes']."<br>";
      
      $message_body .= "Sequencing platform and version: ".$params['data_source_seqplatform']."<bR>";
      if(!empty($params['data_source_url']))
        $message_body .= "Data source URL: ".$params['data_source_url']."<bR>";
      $message_body .= "<br><b>Filename & md5sum </b>:";
      $message_body .= "<bR>".$filename_md5sum."<br>";
  
      $message['body'][] = $message_body;
      $message['body'][] = '<Br><br>Regards,<br><bR>The NAL i5k team';
      $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
      break;
    case 'gene_prediction_email':      
      $message['subject'] = t('Gene prediction data for '.$params['organism'], $variables, array('langcode' => $language->language));	
      $message['body'][] = t("Dear ".$params['name'].", <br><br> Thank you for submmiting the gene prediction for ".rtrim($params['organism']).".", $variables, array('langcode' => $language->language));    
      
      $message['body'][] = "<h1>Submission details:</h1>"; 
      $message_body .= "<b>Analysis Methods:</b><br>";
      $message_body .= "Program: ".$params['program']."<br>";
      $message_body .= "Version: ".$params['version']."<br>";
      if(!empty($params['additional_info'])) 
        $message_body .= "Additional Information: ".$params['additional_info']."<br>";
      if(!empty($other_methods))
        $message_body .= "Other Methods: ".rtrim($other_methods, ',')."<br><br>";
      $message_body .= "<b>Analysis Provider:</b><br>";
      $message_body .= "Name: ".$params['name']."<br>";
      $message_body .= "Email: ".$params['email']."<br>";
      $message_body .= "Affiliation: ".$params['affiliation']."<br><br>";
      $message_body .= "<b>Gene set Information:</b><br>";
      $message_body .= "Name: ".$params['gene_name']."<br>";
      $message_body .= "Version: ".$params['gene_version']."<br>";
      $message_body .= "Descriptive Track: ".$params['descriptive_track']."<br>";
      $message_body .= "Is this an OGS: ".$params['is_ogs']."<br>";
      if($params['is_ogs'] == 'Yes')
        $message_body .= "If Yes: ".$params['reason']."<br>";

      $message_body .= "<br><b>Filename & md5sum:</b>";  
      $message_body .= "<br>".$filename_md5sum;
	  
      $message['body'][] = $message_body;
      $message['body'][] = '<Br><br>Regards,<br><bR>The NAL i5k team';
      $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
      break;
  }
}

/**
 * hook_form 
 * - Create organism and assembly information
 * - Save the data in public schema table
 */
function assembly_data($form, &$form_state) {
  //$form['#tree'] = TRUE;

  $form['#attached']['css'] = array(
    drupal_get_path('module', 'datasets') . '/css/organism_assembly.css',
  );
  //$form['#attached']['js'] = array('misc/collapse.js', 'misc/form.js');

  $form['#attributes']['enctype'] = "multipart/form-data";
 
  // To make the fieldset collapsible
  $form['cordinator_info'] = array(
    '#type' => 'fieldset',
    '#title' => t('Genome coordinator information'),
    '#attributes' => array('class' => array('cordinator_info', 'collapsible', 'collapsed')),
    '#collapsible' => TRUE, // Added
    '#collapsed' => FALSE,  // Added
  );
  
 $form['cordinator_info']['name'] = array(
    '#type' => 'textfield', 
    '#title' => t('Full Name'),    
    '#maxlength' => 255,
    '#required' => TRUE,
  );
  
  $form['cordinator_info']['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email Address'),
    '#maxlength' => 255,
    '#required' => TRUE,
  );
  
  // Project Background
  $form['project'] = array(
    '#type' => 'fieldset',
    '#title' => t('Project Background'),
	'#attributes' => array('class' => array('project')),
    '#collapsible' => TRUE, // Added
    '#collapsed' => FALSE,  // Added
  );
  
  $form['project']['taxid'] = array(
    '#type' => 'textfield', 
    '#title' => t('NCBI tax id'),    
    '#maxlength' => 255,
    '#required' => TRUE,
  );
  $web_apollo_organism = variable_get('web_apollo_organism');
  if(!empty($web_apollo_organism)) {    
    $organism_options = get_webapollo_organisms($web_apollo_organism); 
  }
   
  $form['project']['organism'] = array(
    '#type' => 'select',
    '#title' => t('Organism'),
    '#options' => $organism_options,
    '#ajax' => array(      
      'callback' => 'species_dropdown_callback',
      'wrapper' => 'species',
    ),
    '#limit_validation_errors' => array(),
    '#required' => TRUE,	
  );
  
  $form['project']['species'] = array(
      '#type' => 'fieldset',    	  
      '#prefix' => '<div id="species">',
      '#suffix' => '</div>',    
   );  
  if(isset($form_state['input']['organism'])) {
    $species = $organism_options[$form_state['input']['organism']];	
    $organism_result = db_query("SELECT common_name FROM chado.organism WHERE concat(genus,' ',species) = :species", array(':species' => $species))->fetchObject();
    $common_name = (!empty($form_state['input']['common_name']))?$form_state['input']['common_name']:'';
    $attributes = array();
    if(isset($organism_result->common_name) && !empty($organism_result->common_name)) {  
      $common_name = $organism_result->common_name;
      $attributes =  array('readonly' => 'readonly');
    }

    $form['project']['species']['common_name'] = array(
      '#type' => 'textfield', 
      '#title' => t('Common Name'),    	  
      '#value' => $common_name,
      '#maxlength' => 255,
      '#attributes' => $attributes,
      '#required' => FALSE,
    );
  } 
  
  $portal_options = Array('Yes' => 'Yes', 'No' => 'No');
  
  $form['project']['is_portal'] = array(
    '#type' => 'select', 
    '#title' => t('Is another genome portal already hosting this assembly?'),    
    '#options' => $portal_options,
    '#ajax' => array(      
      'callback' => 'portal_dropdown_callback',
      'wrapper' => 'portal',
    ),
   '#limit_validation_errors' => array(),
    '#required' => TRUE,
  );
  $form['project']['portal'] = array(
    '#type' => 'fieldset',    	  
    '#prefix' => '<div id="portal">',
    '#suffix' => '</div>',    
   );	
  
  if(!empty($form_state['input']['is_portal']) && ($form_state['input']['is_portal'] == 'Yes')) {  
    $form['project']['portal']['portal_yes'] = array(
      '#type' => 'textfield',    
      '#title' => t('Please enter the genome portal that already hosts your genome, so we can ensure there are no conflicts of interest'),      
      '#size' => 40,
    );
  } 
  
  $curate_options = Array('Yes' => 'Yes', 'No' => 'No');
  $form['project']['is_curate_assembly'] = array(
    '#type' => 'select', 
    '#title' => t('Will you manually curate this assembly using i5k workspace tools?'),    
    '#options' => $curate_options,
    '#ajax' => array(      
      'callback' => 'manual_curation_dropdown_callback',
      'wrapper' => 'manual_curation',
    ),
    '#limit_validation_errors' => array(),
    '#required' => TRUE,
  );
  $form['project']['manual_curation'] = array(
    '#type' => 'fieldset',    	
    '#title' => t(''),	 
    '#attributes' => array('class' => array('manual_curation')),	  
    '#prefix' => '<div id="manual_curation">',
    '#suffix' => '</div>',   
    '#collapsible' => TRUE, // Added
    '#collapsed' => FALSE,  // Added	  
  );
  if(!empty($form_state['input']['is_curate_assembly']) && ($form_state['input']['is_curate_assembly'] == 'Yes')) {      
    $form['project']['manual_curation']['is_same'] = array(
      '#type' => 'checkbox',    
      '#title' => t('Is the curation coordinator the same as the genome coordinator?'),      
      '#default_value' =>FALSE, 	  
      '#ajax' => array(
        'callback' => 'name_email_callback',
        'wrapper' => 'name_email',
      ),
    );	
    $form['project']['manual_curation']['name_email'] = array(
      '#type' => 'fieldset',    	
      '#title' => t(''),	 
      '#attributes' => array('class' => array('name_email')),	  
      '#prefix' => '<div id="name_email">',
      '#suffix' => '</div>',   
      '#collapsible' => TRUE, // Added
      '#collapsed' => FALSE,  // Added	  
    );
    $cordinator_name = '';
    $name_attributes = array();
    if($form_state['input']['is_same'] == 1 && !empty($form_state['input']['name'])) {
      $cordinator_name = $form_state['input']['name'];
      $name_attributes = array('readonly' => 'readonly');       
      $form['project']['manual_curation']['name_email']['manual_curation_name'] = array(
        '#type' => 'textfield',
        '#title' => t('Co-ordinator name'),
        '#required' => TRUE,
        '#attributes' => $name_attributes,
        '#value' => $cordinator_name
      );
    } else {
      $form['project']['manual_curation']['name_email']['manual_curation_name'] = array(
        '#type' => 'textfield',
        '#title' => t('Co-ordinator name'),
        '#required' => TRUE,
      );
    } 
	
    $cordinator_email = '';
    $email_attributes = array();
    if($form_state['input']['is_same'] == 1 && !empty($form_state['input']['email'])) {
      $cordinator_email = $form_state['input']['email'];
      $email_attributes = array('readonly' => 'readonly');    
      $form['project']['manual_curation']['name_email']['manual_curation_email'] = array(
        '#type' => 'textfield',    
        '#title' => t('Co-ordinator email'),   
        '#required' => TRUE, 
        '#attributes' => $email_attributes,
        '#value' => $cordinator_email 	  
      );	
    }
    else {
      $form['project']['manual_curation']['name_email']['manual_curation_email'] = array(
        '#type' => 'textfield',
        '#title' => t('Co-ordinator email'),
        '#required' => TRUE
      );
    } 
   $assistance_options = Array('Yes' => 'Yes', 'No' => 'No'); 
   $form['project']['manual_curation']['need_assistance'] = array(
      '#type' => 'select',    
      '#title' => t('Do you need assistance developing an OGS?'), 
      '#options' => $assistance_options,
      '#ajax' => array(      
           'callback' => 'assistance_dropdown_callback',
           'wrapper' => 'assistance',
      ),
      '#limit_validation_errors' => array(),
      '#required' => TRUE,
    );
   $form['project']['manual_curation']['assistance'] = array(
     '#type' => 'fieldset',
     '#prefix' => '<div id="assistance">',
      '#suffix' => '</div>',	  
   );
   if(isset($form_state['input']['need_assistance']) && ($form_state['input']['need_assistance'] == 'Yes')) {
     $form['project']['manual_curation']['assistance']['reason'] = array(
       '#type' => 'textfield',    	        
       '#title' => t('Reason')
     ); 
   }
	
   $form['project']['manual_curation']['time_from'] = array(
     '#type' => 'date_popup',  
     '#date_format' => 'd/m/Y',	  
     '#title' => t('Specify curation time frame'),
     '#attributes' => array('placeholder' => t('Start date')),	  
     '#required' => TRUE,	  
   );
   $form['project']['manual_curation']['time_to'] = array(
     '#type' => 'date_popup',
     '#date_format' => 'd/m/Y',	  
     '#attributes' => array('placeholder' => t('End date')),	  
     '#title' => t(''),  
     '#required' => FALSE,	  
   );
 }   
  
  // Project information
  $form['project_info'] = array(
    '#type' => 'fieldset',
    '#title' => t('Project Information'),
    '#attributes' => array('class' => array('project_info')),
    '#collapsible' => TRUE, // Added
    '#collapsed' => FALSE,  // Added
  );
  $form['project_info']['description'] = array(
    '#type' => 'textarea', 
    '#title' => t('Project description for your organism page'),    
    '#required' => TRUE,
  );
  $form['project_info']['organism_image_url'] = array(
    '#type' => 'textfield',    
    '#title' => t('Image for your organism page'),    
    '#description' => t("Provide the image url"),
  ); 
  
  //Genome assembly information
  $form['assembly'] = array(
    '#type' => 'fieldset',
    '#title' => t('Genome assembly information'),
    '#attributes' => array('class' => array('assembly')),
    '#collapsible' => TRUE, // Added
    '#collapsed' => FALSE,  // Added
  );
  
  
  /*Data Source Information*/
  $form['assembly']['data_source'] = array(
    '#type' => 'fieldset',
    '#title' => t('Data source information'),
     '#attributes' => array('class' => array('assembly_data_source')),
    '#collapsible' => TRUE, // Added
    '#collapsed' => FALSE,  // Added
  ); 
  
  $form['assembly']['data_source']['geo_location'] = array(
    '#type' => 'textfield',
    '#title' => t('Geo location'),
    '#required' => FALSE,
    '#description' => "Geographical localtion of specimen collection (Country, Site, Latitude, Longitude)",	
  );
  $form['assembly']['data_source']['tissues_located'] = array(
    '#type' => 'textfield',
    '#title' => t('Tissues/Life stage<br> included'),	
    '#required' => FALSE,
    '#description' => "<br>(Whole individual/ antenna / pooled larva / pooled adult female/ etc.)",	
  );
  
  $gender_options = Array( '' => 'Select',
			   'Female' => 'Female',
                           'Male' 	=> 'Male', 
			   'Pooled' => 'Pooled',
			   'NA' => 'Other/NA',
                         );
  $gender_selected = isset($form_state['values']['data_gender']) ? $form_state['values']['data_gender'] : key($gender_options);
  $form['assembly']['data_source']['gender'] = array(
    '#type' => 'select',
    '#options' => $gender_options, 
    '#title' => t('Sex'),
    '#default_value' => $gender_selected,
    '#ajax' => array(      
      'callback' => 'assembly_gender_dropdown_callback',
      'wrapper' => 'gender_textfield',
    ),
   '#limit_validation_errors' => array(),		
    '#required' => FALSE	
  );
    
  $form['assembly']['data_source']['gender_textfield'] = array(
    '#prefix' => '<div id="gender_textfield">',
    '#suffix' => '</div>',
    '#type' => 'fieldset',    
  );

  if (isset($form_state['input']['gender']) && ($form_state['input']['gender'] == 'NA')) { 	
    $form['assembly']['data_source']['gender_textfield']['other_gender'] = array(
      '#type' => 'textfield',
      '#title' => t('Other/NA (Sex)'),	  
    );
  } 

  $form['assembly']['data_source']['data_source_strain'] = array(
      '#type' => 'textfield',
      '#title' => t('Strain')	  
  );
  
  $form['assembly']['data_source']['data_source_notes'] = array(
      '#type' => 'textfield',
      '#title' => t('Other notes')	  
  ); 
  
  $form['assembly']['data_source']['data_source_seqplatform'] = array(
      '#type' => 'textfield',
      '#title' => t('Sequencing platform and version (Illumina Hi-Seq 200 bp)'),
      '#required' => TRUE,	  
  );
  
  $form['assembly']['data_source']['data_source_url'] = array(
      '#type' => 'textfield',
      '#title' => t('Data source URL'),
      '#required' => FALSE,	  
  );
  
  $form['assembly']['info'] = array(
    '#type' => 'fieldset',
    '#title' => t('Assembly information'),
    '#attributes' => array('class' => array('aa_information')), 
    '#collapsible' => TRUE, // Added
    '#collapsed' => FALSE,  // Added
  );
  $form['assembly']['info']['assembly_name'] = array(
    '#type' => 'textfield', 
    '#title' => t('Assembly name'),    
    '#maxlength' => 255,
    '#required' => TRUE,
  );
   $form['assembly']['info']['assembly_version'] = array(
    '#type' => 'textfield', 
    '#title' => t('Assembly Version'),    
    '#maxlength' => 255,
    '#required' => TRUE,
  );
   $form['assembly']['info']['assembly_accession'] = array(
    '#type' => 'textfield', 
    '#title' => t('NCBI/INSDC Genome Assembly accession #'),    
    '#maxlength' => 255,
    '#required' => TRUE,
  );
  $form['assembly']['info']['assembly_method'] = array(
    '#type' => 'textfield', 
    '#title' => t('Analysis method'),    
	'#description' => t('program and version; can be short description or PubMedID'),
    '#maxlength' => 255,
    '#required' => TRUE,
  );
  $publish_options = Array('' => 'Select', 
			   'Yes' => 'Yes',
                           'No' => 'No'); 
  $selected = isset($form_state['values']['is_publish']) ? $form_state['values']['is_publish'] : key($publish_options);
  
  $form['assembly']['info']['is_publish'] = array(
    '#type' => 'select',
    '#options' => $publish_options, 
    '#title' => t('Is the assembly published?'),
    '#default_value' => $selected,
    '#ajax' => array(      
        'callback' => 'assembly_publish_dropdown_callback',
        'wrapper' => 'assembly_publish',
    ),		
    '#limit_validation_errors' => array(),
    '#required' => TRUE	
  );
    
  $form['assembly']['info']['assembly_publish'] = array(
    '#prefix' => '<div id="assembly_publish">',
    '#suffix' => '</div>',
    '#type' => 'fieldset',    
  );

  // Since dropdown return TRUE or FALSE, we have to check that
  // $form_state has been filled as well as what it contains.
  if (!empty($form_state['input']['is_publish']) && isset($form_state['input']['is_publish'])) {      
    $description = ($form_state['input']['is_publish'] == 'Yes')? t('please provide citation'):t('please indicate whether Toronto/Ft. Lauderdale conditions of data re-use should apply');	
    $publish_title = 'publish_field_data';	

    $form['assembly']['info']['assembly_publish'][$publish_title] = array(
      '#type' => 'textfield',
      '#title' => t('If ').$form_state['input']['is_publish'],
      '#description' => $description
    );
  } 
  $form['assembly']['info']['other_notes'] = array(
    '#type' => 'textfield',
    '#title' => t('Other notes')	  
  );
  
  $form['upload_entry'] = array(
    '#type' => 'fieldset',
    '#title' => t('Assembly file information'),
    '#prefix' => '<div id="upload-fieldset-wrapper">',
    '#suffix' => '</div>',
    '#collapsible' => TRUE, // Added
    '#collapsed' => FALSE,  // Added
  );

  if (empty($form_state['pnum_upload'])) {
    $form_state['pnum_upload'] = 1;
  }

  for ($i = 0; $i < $form_state['pnum_upload']; $i++) {    
    //Parent container
    $form['upload_entry']['upload_wrapper'][$i] = array(
    '#prefix' => '<div class="two-col">',
    '#suffix' => '</div>'
    );
    $flag = ($i == 0)?TRUE:FALSE;
    $form['upload_entry']['upload_wrapper']['filename_'.$i] = array(
      '#type' => 'textfield',
      '#title' => 'File name',
      '#maxlength' => 255,       
      '#prefix' => '<div class="f_class">',
       	'#suffix' => '</div>',	
        '#required' => $flag,
        '#attributes' => array('multiple' => 'multiple'),
    );
    $form['upload_entry']['upload_wrapper']['md5sum_'.$i] = array(
      '#type' => 'textfield',
      '#title' => 'md5sum',
      '#prefix' => '<div class="m_class">',
      '#suffix' => '</div>',
      '#maxlength' => 255,	
      '#required' => $flag,		
      '#attributes' => array('multiple' => 'multiple'),
    );
  }

  $form['upload_entry']['add_other_uploads'] = array(
    '#type' => 'submit',
    '#value' => t('Add another file'),
    '#submit' => array('upload_add_more_add_one'),
    '#ajax' => array(
        'callback' => 'upload_add_more_callback',
        'wrapper' => 'upload-fieldset-wrapper',
    ),
    '#limit_validation_errors' => array(), // No elements will be validated
  );
  if ($form_state['pnum_upload'] > 1) {
    $form['upload_entry']['remove_other_uploads'] = array(
      '#type' => 'submit',
      '#value' => t('Remove latest one'),
      '#submit' => array('upload_remove_latest_one'),
      '#ajax' => array(
        'callback' => 'upload_add_more_callback',
	'wrapper' => 'upload-fieldset-wrapper',
      ),
      '#limit_validation_errors' => array(), // No elements will be validated
    );
  }
 
  // Enabling honeypot to avoid spam
  honeypot_add_form_protection($form, $form_state, array('honeypot', 'time_restriction'));
  $form['captcha'] = array(
    '#type' => 'captcha',
    '#captcha_type' => 'datasets/Math',
  );
 
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  
  return $form;
}

function assembly_data_validate($form, &$form_state) {  
  $values = $form_state['values'];
  //echo "<prE>"; print_r($values);echo "</prE>";exit;
  
  /*Genome co-ordinator Name & Email*/
  $name = $values['name'];
  if(!preg_match('!^[\w @-]*$!', $name)){
     form_set_error('name', t('Your Full Name can only contains numbers, letters @  - _.'));
  }
  if(!valid_email_address($values['email'])) {
    form_set_error('email', t('You must enter a valid e-mail address.'));
  }    
  
  /*NCBI TAXID numeric validation*/
  if(!empty($values['taxid']) && !is_numeric($values['taxid'])) {
    form_set_error('taxid', t('Taxid should be a number'));
  }
 
/*$taxid_result = db_query("SELECT taxid FROM public.ds_organism_assembly WHERE taxid = :taxid", array(':taxid' => $values['taxid']))->fetchObject();
  if(!empty($taxid_result->taxid) && ($taxid_result->taxid >=1) ) {
     form_set_error('taxid', t('Taxid already exists'));
  }
  */

  if(!empty($values['is_portal']) && ($values['is_portal'] == 'Yes') && empty($values['portal_yes']) && empty($values['portal_yes']) ) {
    form_set_error('portal_yes', t('Explain the reason')); 
  }
  
  /*Manual curation co-ordinator name and email  */
  if(!empty($values['is_curator_assembly']) && ($values['is_curator_assembly'] == 'Yes') && empty($values['manual_curation_name'])) {
    form_set_error('manual_curation_name', t('Co-ordinator name field is required.'));
  }
  if(!empty($values['is_curator_assembly']) && ($values['is_curator_assembly'] == 'Yes') && empty($values['manual_curation_email'])) {
    form_set_error('manual_curation_email', t('Co-ordinator email field is required.'));
  }
  
  if(isset($values['manual_curation_name']) && !empty($values['manual_curation_name']) && !preg_match('!^[\w @-]*$!', $values['manual_curation_name'])){
     form_set_error('manual_curation_name', t('Your Name can only contains numbers, letters @  - _.'));
  }
  if(isset($values['manual_curation_email']) && !empty($values['manual_curation_email']) && !valid_email_address($values['manual_curation_email'])) {
    form_set_error('manual_curation_email', t('You must enter a valid e-mail address.'));
  }
  
  /*Assistance developing an OGS Reason field*/ 
  if(!empty($values['need_assistance']) && ($values['need_assistance'] == 'Yes') && empty($values['reason'])) {
    form_set_error('reason', t('Reason field is required.')); 
  }  
 
  /*validate empty End date */  
  if(!empty($values['is_curate_assembly']) && ($values['is_curate_assembly'] == 'Yes') && is_null($values['time_to'])) {  
    form_set_error('time_to', t('End date field is required.'));
  }
  
 
  /*Validate End date greater than Start date*/
  if(!empty($values['time_to']) && !empty($values['time_from']) && ($values['time_to'] < $values['time_from'])) {
    form_set_error('time_to', t('End date should be greater than Start date.'));
  }  
 
  /*Organism image URL */
  if (!empty($values['organism_image_url']) && !valid_url($values['organism_image_url'], 'TRUE')) {
    form_set_error('organism_image_url', t('You must enter a valid url.'));
  }

  
  if(!empty($values['is_publish']) && empty($values['publish_field_data'])) {
    form_set_error('publish_field_data', t('Enter the reason for assembly published.'));
  }

  if(!empty($values['gender']) && ($values['gender'] == 'NA') && empty($values['other_gender'])) {
    form_set_error('other_gender', t('Enter the other sex field value.'));
  }
  
  /*Data Source URL */
  if (!empty($values['data_source_url']) && !valid_url($values['data_source_url'], 'TRUE')) {
    form_set_error('data_source_url', t('You must enter a valid url.'));
  }
  //Filename and md5sum validations if they have any comma it wouldnot allow to submit the form. Only below mentioned characters and special characters and allowed.
  foreach($values as $key => $value) {
    if(preg_match('/^filename_/', $key, $match)) {
      if(!preg_match('!^[\w .-]*$!', $value)) {
        form_set_error($key, t('Your filename can only contains numbers, letters -_.'));
      }
   
      $file = explode('_',$key);
      $file_name = 'filename_'.$file[1];
      $md5_sum = 'md5sum_'.$file[1];
     if(!empty($values[$file_name]) && empty($values[$md5_sum])) {
        form_set_error($md5_sum, t('You must enter md5sum '.($file[1]+1).'.'));
      }  
    }
    if(preg_match('/^md5sum_/', $key, $match)) {
      if(!preg_match('!^[\w .-]*$!', $value)) {
        form_set_error($key, t('Your md5sum can only contains numbers, letters -_.'));
      }
      $md5_key = explode('_', $key);
      if(empty($values['filename_'.$md5_key[1]]) && !empty($values['md5sum_'.$md5_key[1]])) {
        form_set_error('filename_'.$md5_key[1], t('You must enter filename '.($md5_key[1]+1).'.'));
      }
    }

    if(preg_match('/^other_methods_/', $key, $match_methods)) {
      if(!preg_match('!^[\w -]*$!', $value)) {
        form_set_error($key, t('Your other methods field can only contains numbers, letters -_.'));
      }
    }
  }
}


function assembly_data_submit($form, &$form_state) {
  $values = $form_state['values'];  
  //echo "<pre>";print_r($values); exit;
  $web_apollo_organism = variable_get('web_apollo_organism');
  if(!empty($web_apollo_organism)) {
    $organism_list = get_webapollo_organisms($web_apollo_organism);
  }

  $names = Array(); $data = Array();
  $exclude_fields = Array('add_other_uploads', 'remove_other_uploads', 'submit', 'form_build_id', 'form_token', 'form_id', 'op','captcha_token','captcha_sid', 'captcha_response', 'i5kurl', 'honeypot_time','captcha');
  $filename = ''; $md5sum = '';
  foreach($values as $name => $value) {
    if(!in_array($name, $exclude_fields)) 
	{
	  if(preg_match('/^filename_/', $name, $match)) {
	    $filename .= $value.",";
	  } 
	  else if(preg_match('/^md5sum_/', $name, $match1)) {
	    $md5sum .= $value.",";
	  }
	  else if(!preg_match('/^md5sum_/', $name, $match1) && !preg_match('/^filename_/', $name, $match)) {	  
            array_push($names, $name);
	    if($name == 'time_from' || $name == 'time_to') {
	      $dd = explode('-', $value);
		  $dd_format = $dd[2].'-'.$dd[1].'-'.$dd[0];
	      $value = strtotime($dd_format);
	    }
	    array_push($data, "'".pg_escape_string($value)."'");
	  }
	}	
	
  }
  $filename = rtrim($filename, ",");
  $md5sum = rtrim($md5sum, ",");
  array_push($names,'filename');
  array_push($names,'md5sum');
  array_push($names,'created');
  
  array_push($data, "'".$filename."'");
  array_push($data, "'".$md5sum."'");
	
  $timestamp = time();
  array_push($data, $timestamp);
 
  $names_col = implode(',', $names);  
  $values_col = implode(',', $data);
 
// echo "insert into public.ds_organism_assembly($names_col) values($values_col)";exit;
 db_query("insert into public.ds_organism_assembly($names_col) values($values_col)");   
  
  // E-mail address of the sender: as the form field is a text field.  
  $from = FROM_ADDRESS;
  $to_address = $values['email'];
  $values['organism'] = $organism_list[$values['organism']];

//echo "param <pre>"; print_r($values);echo "</prE>";exit;
  // Send the e-mail to the recipients using the site default language.
  $sent =  drupal_mail('datasets', 'assembly_dataset_email', $to_address, language_default(), $values, $from, TRUE);

  if(empty($sent['result']) || ($sent['result'] != 1)) {
    /*handle send fail, $sent ===false when mail fails, but it won't always recognize a failure*/
    drupal_set_message(t('Failed to send e-mail.'));
  } else
    drupal_set_message(t('Your data was submitted successfully. For your reference we are sending out an email with the fields filled.'));
  
}

function portal_dropdown_callback($form, $form_state) {
  return $form['project']['portal'];
}

function manual_curation_dropdown_callback($form, $form_state) {
  return $form['project']['manual_curation'];
}

function name_email_callback($form, $form_state) {
  return $form['project']['manual_curation']['name_email'];
}

function assistance_dropdown_callback($form, $form_state) {
  return $form['project']['manual_curation']['assistance'];
}

function species_dropdown_callback($form, $form_state) {
  return $form['project']['species'];
}

function assembly_publish_dropdown_callback($form, $form_state) {
  return $form['assembly']['info']['assembly_publish'];
}

function assembly_gender_dropdown_callback($form, $form_state) {
 return $form['assembly']['data_source']['gender_textfield'];  
}


/**
 * gene prediction information form
 */
function gene_prediction($form, &$form_state) {
  $form['#attached']['css'] = array(
    drupal_get_path('module', 'datasets') . '/css/gene_prediction.css',
  ); 


  $web_apollo_organism = variable_get('web_apollo_organism');
  if(!empty($web_apollo_organism)) {    
    $organism_options = get_webapollo_organisms($web_apollo_organism); 
  }
   
  $form['organism'] = array(
    '#type' => 'select',
    '#title' => t('Organism'),
    '#options' => $organism_options,
    '#multiple' => FALSE,
    '#required' => TRUE,	
  );
 
  //Analysis Method - To make the fieldset collapsible
  $form['analysis_method'] = array(
    '#type' => 'fieldset',
    '#title' => t('Analysis Method'),
    '#collapsible' => TRUE, // Added
    '#collapsed' => FALSE  // Added
  );
     
  $form['analysis_method']['program'] = array(
    '#type' => 'textfield',
    '#title' => t('Program'),	
    '#required' => TRUE	
  );
  $form['analysis_method']['version'] = array(
    '#type' => 'textfield',
    '#title' => t('version'),	
    '#required' => TRUE	
  );
  $form['analysis_method']['additional_info'] = array(
    '#type' => 'textfield',
    '#title' => t('Additional Information'),	
	'#description' => t('Special settings or parameters used.'),
    '#required' => FALSE
  );
  
  $form['analysis_method']['dataset_entry'] = array(
    '#type' => 'fieldset',
    '#title' => t('Other Methods'),
    '#prefix' => '<div id="entry-fieldset-wrapper">',
    '#suffix' => '</div>',
  );

  if (empty($form_state['pnum_methods'])) {
    $form_state['pnum_methods'] = 1;
  }

  for ($i = 0; $i < $form_state['pnum_methods']; $i++) {
    $form['analysis_method']['dataset_entry']['other_methods_'.$i] = array(
		'#type' => 'textfield',
        '#title' => '',
        '#size' => 22,
        '#description' => t('Such as adapter-trimming, barcoding, QC, etc'),
        '#attributes' => array('multiple' => 'multiple'),
    );
  }

  $form['analysis_method']['dataset_entry']['add_other_methods'] = array(
    '#type' => 'submit',
    '#value' => t('Add more method'),
    '#submit' => array('methods_add_more_add_one'),
    '#ajax' => array(
        'callback' => 'methods_add_more_callback',
        'wrapper' => 'entry-fieldset-wrapper',
    ),
    '#limit_validation_errors' => array(), // No elements will be validated
  );
  if ($form_state['pnum_methods'] > 1) {
    $form['analysis_method']['dataset_entry']['remove_other_methods'] = array(
		'#type' => 'submit',
		'#value' => t('Remove the latest method'),
		'#submit' => array('methods_remove_latest_one'),
		'#ajax' => array(
			'callback' => 'methods_add_more_callback',
			'wrapper' => 'entry-fieldset-wrapper',
		),
		'#limit_validation_errors' => array(), // No elements will be validated
	);
  } 
  
 
  // Analysis Provider - To make the fieldset collapsible
  $form['analysis_provider'] = array(
    '#type' => 'fieldset',
    '#title' => t('Analysis provider'),
    '#collapsible' => TRUE, // Added
    '#collapsed' => FALSE,  // Added
  );
  
 $form['analysis_provider']['name'] = array(
    '#type' => 'textfield', 
    '#title' => t('Full Name'),    
    '#maxlength' => 255,
    '#required' => TRUE,
  );
  
  $form['analysis_provider']['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email Address'),
    '#maxlength' => 255,
    '#required' => TRUE,
  );
  
  $form['analysis_provider']['affiliation'] = array(
    '#type' => 'textfield',
    '#title' => t('Affiliation'),
    '#required' => TRUE,
  );  
  
  // Gene set information -  To make the fieldset collapsible
  $form['gene_set'] = array(
    '#type' => 'fieldset',
    '#title' => t('Gene set information'),
    '#collapsible' => TRUE, // Added
    '#collapsed' => FALSE  // Added
  );
  
  $form['gene_set']['gene_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),	
    '#required' => TRUE	
  );
  $form['gene_set']['gene_version'] = array(
    '#type' => 'textfield',
    '#title' => t('Version'),	
    '#required' => TRUE	
  );
  $form['gene_set']['descriptive_track'] = array(
    '#type' => 'textfield',
    '#title' => t('Descriptive Track'),	
    '#description' => t('(This is what the users will see in Jbrowse/Web Apollo - if not given, we will use the Gene set name + version number'),
    '#required' => TRUE	
  );
  
  $ogs_options = Array('Yes' => 'Yes', 'No' => 'No');
  $form['gene_set']['is_ogs'] = array(
    '#type' => 'select',    
    '#title' => t('Is this an OGS?'), 
    '#options' => $ogs_options,
    '#ajax' => array(      
      'callback' => 'ogs_dropdown_callback',
       'wrapper' => 'ogs',
    ),
   '#limit_validation_errors' => array(),
    '#required' => TRUE,
  );
  $form['gene_set']['ogs'] = array(
    '#type' => 'fieldset',
    '#prefix' => '<div id="ogs">',
    '#suffix' => '</div>',	  
  );

  if(isset($form_state['input']['is_ogs']) && ($form_state['input']['is_ogs'] == 'Yes')) {
    $form['gene_set']['ogs']['reason'] = array(
      '#type' => 'textfield',    	        
      '#title' => t('Reason')
    ); 
  } 
  
  $form['upload_entry'] = array(
    '#type' => 'fieldset',
    '#title' => t('if uploading to our ftp site, md5sum for each data file'),
    '#prefix' => '<div id="upload-fieldset-wrapper">',
    '#suffix' => '</div>',
    '#collapsible' => TRUE, // Added
    '#collapsed' => FALSE,  // Added
  );

  if (empty($form_state['pnum_upload'])) {
    $form_state['pnum_upload'] = 1;
  }

  for ($i = 0; $i < $form_state['pnum_upload']; $i++) {    
    //Parent container
    $form['upload_entry']['upload_wrapper'][$i] = array(
      '#prefix' => '<div class="two-col">',
      '#suffix' => '</div>'
    );
    $flag = ($i == 0)?TRUE:FALSE;
    $form['upload_entry']['upload_wrapper']['filename_'.$i] = array(
      '#type' => 'textfield',
      '#title' => 'Filename',
      '#maxlength' => 255,       
      '#prefix' => '<div class="f_class">',
      '#suffix' => '</div>',	
      '#required' => $flag,
      '#attributes' => array('multiple' => 'multiple'),
    );
   $form['upload_entry']['upload_wrapper']['md5sum_'.$i] = array(
      '#type' => 'textfield',
      '#title' => 'md5sum',
      '#prefix' => '<div class="m_class">',
      '#suffix' => '</div>',
      '#maxlength' => 255,	
      '#required' => $flag,		
      '#attributes' => array('multiple' => 'multiple'),
    );
  }

  $form['upload_entry']['add_other_uploads'] = array(
    '#type' => 'submit',
    '#value' => t('Add another file'),
    '#submit' => array('upload_add_more_add_one'),
    '#ajax' => array(
      'callback' => 'upload_add_more_callback',
      'wrapper' => 'upload-fieldset-wrapper',
    ),
    '#limit_validation_errors' => array(), // No elements will be validated
  );
  if ($form_state['pnum_upload'] > 1) {
	$form['upload_entry']['remove_other_uploads'] = array(
		'#type' => 'submit',
		'#value' => t('Remove latest one'),
		'#submit' => array('upload_remove_latest_one'),
		'#ajax' => array(
			'callback' => 'upload_add_more_callback',
			'wrapper' => 'upload-fieldset-wrapper',
		),
		'#limit_validation_errors' => array(), // No elements will be validated
  );
  }
  
  // Enabling honeypot to avoid spam
  honeypot_add_form_protection($form, $form_state, array('honeypot', 'time_restriction'));
  $form['captcha'] = array(
    '#type' => 'captcha',
    '#captcha_type' => 'datasets/Math',
  );
  

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  
  
  return $form;
}

/**
 * dropdown callback
 */
function ogs_dropdown_callback($form, $form_state) {
  return $form['gene_set']['ogs'];
}

/**
 * hook_validate()
 */
function gene_prediction_validate(&$form, &$form_state) {  
  $values = $form_state['values'];
//echo "<pre>"; print_r($form_state['values']); print_r($form_state['input']); echo "</pre>";

  $name = $values['name'];
  if (!preg_match('!^[\w @-]*$!', $name)){
     form_set_error('name', t('Your Name can only contains numbers, letters @  -_.'));
  }
  if (!valid_email_address($values['email'])) {
    form_set_error('email', t('You must enter a valid e-mail address.'));
  }
  $affiliation = $values['affiliation'];
  if (!preg_match('!^[\w @-]*$!', $affiliation)){
     form_set_error('affiliation', t('Your 
	 Affiliation can only contains numbers, letters @  - _.'));
  }
 
  if(!empty($values['is_ogs']) && empty($values['reason'])) {
    form_set_error('reason', t('Enter the reason OGS.'));
  }

 
  foreach($values as $key => $value) {
    if(preg_match('/^filename_/', $key, $match)) {
      if(!preg_match('!^[\w .-]*$!', $value)) {
        form_set_error($key, t('Your filename can only contains numbers, letters -_.'));
      }

      $file = explode('_',$key);
      $file_name = 'filename_'.$file[1];
      $md5_sum = 'md5sum_'.$file[1];
     if(!empty($values[$file_name]) && empty($values[$md5_sum])) {
        form_set_error($md5_sum, t('You must enter md5sum '.($file[1]+1).'.'));
      }
    }
    if(preg_match('/^md5sum_/', $key, $match)) {
      if(!preg_match('!^[\w .-]*$!', $value)) {
        form_set_error($key, t('Your md5sum can only contains numbers, letters -_.'));
      }
      $md5_key = explode('_', $key);
      if(empty($values['filename_'.$md5_key[1]]) && !empty($values['md5sum_'.$md5_key[1]])) {
        form_set_error('filename_'.$md5_key[1], t('You must enter filename '.($md5_key[1]+1).'.'));
      }
    }

    if(preg_match('/^other_methods_/', $key, $match_methods)) {
      if(!preg_match('!^[\w -]*$!', $value)) {
        form_set_error($key, t('Your other methods field can only contains numbers, letters -_.'));
      }
    }
  }


}

/**
 * hook_submit()
 */
function gene_prediction_submit($form, &$form_state) {  
  $values = $form_state['values'];
  //echo "<pre>"; print_r($values); echo "</pre>";  
   $web_apollo_organism = variable_get('web_apollo_organism');
  if(!empty($web_apollo_organism)) {
    $organism_list = get_webapollo_organisms($web_apollo_organism);
  }

  /* $names_col = Array('organism','program','version','additional_info','name','email','affiliation','gene_name','gene_version',
  'descriptive_track','is_ogs','reason','other_methods','filename','md5sum','created');
  */

  $exclude_fields = Array('i5kurl', 'honeypot_time', 'add_other_methods', 'remove_other_methods', 'add_other_uploads', 'remove_other_uploads', 'submit', 'form_build_id', 'form_token', 'form_id', 'op','captcha_token','captcha_sid', 'captcha_response', 'i5kurl', 'honeypot_time','captcha');
  $names_col = Array();  
  $values_col = Array();
  $created = time(); $other_methods = ''; $filename = ''; $md5sum = '';
  
  foreach($values as $key => $value) {
    if(!in_array($key, $exclude_fields)) {
      if(preg_match('/^other_methods_/', $key)) {              
        $other_methods .= $value.",";
      }
      else if(preg_match('/^filename_/', $key)) {
        $filename .= $value.",";
      }
      else if(preg_match('/^md5sum_/', $key)) {
        $md5sum .= $value.",";
      }
      else if(isset($value) && !empty($value)){            
       array_push($names_col, $key);
       array_push($values_col, "'".$value."'");
      }	
    }
  }
  $other_methods = rtrim($other_methods, ',');
  $filename = rtrim($filename, ',');
  $md5sum = rtrim($md5sum, ',');
  array_push($names_col, 'other_methods');
  array_push($values_col, "'".$other_methods,"'");
  array_push($names_col, 'filename');
  array_push($values_col, "'".$filename."'");
  array_push($names_col, 'md5sum');
  array_push($values_col, "'".$md5sum."'");
  array_push($names_col, 'created');
  array_push($values_col, $created); 
  
  $names = implode(',', $names_col);
  $data = implode(',', $values_col);  
  //echo "insert into public.ds_gene_prediction($names) values($data)";exit; 
 
  db_query("insert into public.ds_gene_prediction($names) values($data)"); 
  // E-mail address of the sender: as the form field is a text field.  
  $from = FROM_ADDRESS;
  $to_address = $values['email'];
  $values['organism'] = $organism_list[$values['organism']];

  // Send the e-mail to the recipients using the site default language.
  $sent =  drupal_mail('datasets', 'gene_prediction_email', $to_address, language_default(), $values, $from, TRUE);
  if(empty($sent['result']) || ($sent['result'] != 1)) {
    /*handle send fail, $sent ===false when mail fails, but it won't always recognize a failure*/
    drupal_set_message(t('Failed to send e-mail.'));
  } else
    drupal_set_message(t('Your gene prediction information is successfully submitted. For your reference we are sending out an email with the fields filled.'));
}

/**
 * Assembly information view
 */
function assembly_information_view($oa_id) {
  // Select table
  $query = db_select('ds_organism_assembly', 'os');
  // Select fields
  $query->fields("os");
  // Condition
  $query->condition("oa_id", $oa_id);    
  
  // Execute query
  $result = $query->execute()->fetchAll();  
 
  // Now build the form array
  $web_apollo_organism = variable_get('web_apollo_organism');
  $organism_data = get_webapollo_organisms($web_apollo_organism); 
  $result[0]->organism = $organism_data[$result[0]->organism];

  $output = theme('assembly_information_view', array('data' => $result));
  
  return $output;
}

/**
 * Gene Prediction view
 */
function gene_prediction_view($pid) {
  // Select table
  $query = db_select('ds_gene_prediction', 'p');
  // Select fields
  $query->fields("p");
  // Condition
  $query->condition("pid", $pid);

  // Execute query
  $result = $query->execute()->fetchAll();

  // Now build the form array
  $web_apollo_organism = variable_get('web_apollo_organism');
  $organism_data = get_webapollo_organisms($web_apollo_organism);
  $result[0]->organism = $organism_data[$result[0]->organism];
  
  $output = theme('gene_prediction_view', array('data' => $result));

  return $output;
}

/**
 * Mapped dataset view
 */
function mapped_dataset_view($id) {
  // Select table
  $query = db_select('ds_mapped_dataset', 'm');
  // Select fields
  $query->fields("m");
  // Condition
  $query->condition("id", $id);

  // Execute query
  $result = $query->execute()->fetchAll();

  // Now build the form array
  $web_apollo_organism = variable_get('web_apollo_organism');
  $organism_data = get_webapollo_organisms($web_apollo_organism);
  $result[0]->organism = $organism_data[$result[0]->organism];
  
  $output = theme('mapped_dataset_view', array('data' => $result));

  return $output;
}

function theme_datasets_table($variables) {
  $header = $variables['header'];
  $rows = $variables['rows'];
  $attributes = $variables['attributes'];
  $caption = $variables['caption'];
  $colgroups = $variables['colgroups'];
  $sticky = $variables['sticky'];
  $empty = $variables['empty'];

  // Add sticky headers, if applicable.
  if (count($header) && $sticky) {
    drupal_add_js('misc/tableheader.js');
    // Add 'sticky-enabled' class to the table to identify it for JS.
    // This is needed to target tables constructed by this function.
    $attributes['class'][] = 'sticky-enabled';
  }

  $output = '<table' . drupal_attributes($attributes) . ">\n";

  if (isset($caption)) {
    $output .= '<caption>' . $caption . "</caption>\n";
  }

  // Format the table columns:
  if (count($colgroups)) {
    foreach ($colgroups as $number => $colgroup) {
      $attributes = array();

      // Check if we're dealing with a simple or complex column
      if (isset($colgroup['data'])) {
        foreach ($colgroup as $key => $value) {
          if ($key == 'data') {
            $cols = $value;
          }
          else {
            $attributes[$key] = $value;
          }
        }
      }
      else {
        $cols = $colgroup;
      }

      // Build colgroup
      if (is_array($cols) && count($cols)) {
        $output .= ' <colgroup' . drupal_attributes($attributes) . '>';
        $i = 0;
        foreach ($cols as $col) {
          $output .= ' <col' . drupal_attributes($col) . ' />';
        }
        $output .= " </colgroup>\n";
      }
      else {
        $output .= ' <colgroup' . drupal_attributes($attributes) . " />\n";
      }
    }
  }

  // Add the 'empty' row message if available.
  if (!count($rows) && $empty) {
    $header_count = 0;
    foreach ($header as $header_cell) {
      if (is_array($header_cell)) {
        $header_count += isset($header_cell['colspan']) ? $header_cell['colspan'] : 1;
      }
      else {
        $header_count++;
      }
    }
    $rows[] = array(array('data' => $empty, 'colspan' => $header_count, 'class' => array('empty', 'message')));
  }

  // Format the table header:
  if (count($header)) {
    $ts = tablesort_init($header);
    // HTML requires that the thead tag has tr tags in it followed by tbody
    // tags. Using ternary operator to check and see if we have any rows.
    $output .= (count($rows) ? ' <thead><tr>' : ' <tr>');
    foreach ($header as $cell) {

      //VIJAYA - CHANGED BELOW 2 LINES OF CODE HERE
      // $cell = tablesort_header($cell, $header, $ts);
      $ts['org'] = isset($_POST['organism'])?$_POST['organism']:$_GET['organism'];
      $cell = ds_tablesort_header($cell, $header, $ts);

      $output .= _theme_table_cell($cell, TRUE);
    }
    // Using ternary operator to close the tags based on whether or not there are rows
    $output .= (count($rows) ? " </tr></thead>\n" : "</tr>\n");
  }
  else {
    $ts = array();
  }

  // Format the table rows:
  if (count($rows)) {
    $output .= "<tbody>\n";
    $flip = array('even' => 'odd', 'odd' => 'even');
    $class = 'even';
    foreach ($rows as $number => $row) {
      // Check if we're dealing with a simple or complex row
      if (isset($row['data'])) {
        $cells = $row['data'];
        $no_striping = isset($row['no_striping']) ? $row['no_striping'] : FALSE;

        // Set the attributes array and exclude 'data' and 'no_striping'.
        $attributes = $row;
        unset($attributes['data']);
        unset($attributes['no_striping']);
      }
      else {
        $cells = $row;
        $attributes = array();
        $no_striping = FALSE;
      }
      if (count($cells)) {
        // Add odd/even class
        if (!$no_striping) {
          $class = $flip[$class];
          $attributes['class'][] = $class;
        }

        // Build row
        $output .= ' <tr' . drupal_attributes($attributes) . '>';
        $i = 0;
        foreach ($cells as $cell) {
          $cell = tablesort_cell($cell, $header, $ts, $i++);
          $output .= _theme_table_cell($cell);
        }
        $output .= " </tr>\n";
      }
    }
    $output .= "</tbody>\n";
  }

  $output .= "</table>\n";
  return $output;
}

/**
 *  VIJAYA -  Overriding theme for tablesort_header
 */
function ds_tablesort_header($cell, $header, $ts) {
  // Special formatting for the currently sorted column header.
  if (is_array($cell) && isset($cell['field'])) {
    $title = t('sort by @s', array('@s' => $cell['data']));
    if ($cell['data'] == $ts['name']) {
      $ts['sort'] = (($ts['sort'] == 'asc') ? 'desc' : 'asc');
      $cell['class'][] = 'active';
      $image = theme('tablesort_indicator', array('style' => $ts['sort']));
    }
    else {
      // If the user clicks a different header, we want to sort ascending initially.
      $ts['sort'] = 'asc';
      $image = '';
    }
    //VIJAYA - CHANGED BELOW LINE   
    $cell['data'] = l($cell['data'] . $image, $_GET['q'], array('attributes' => array('title' => $title), 'query' => array_merge($ts['query'], array('sort' => $ts['sort'], 'order' => $cell['data'],'organism' => $ts['org'])), 'html' => TRUE));

    unset($cell['field'], $cell['sort']);
  }
  return $cell;
}

/**
 *  Implementation of hook_theme().
 */
function datasets_theme() {
  $core_path = drupal_get_path('module', 'datasets');
   //$path = 'themes/templates/';
  return array(
    'datasets_organism_approval' => array(
      'template' => $core_path.'datasets_organism_approval',
	  'render element' => 'form',
	  'path' => $core_path."/theme/templates",
    ),	
	'assembly_information_view' => array(
      'template' => 'assembly_information_view',
      'path' => $core_path."/theme/templates",
      'variables' => array('data' => NULL),
    ),
    'gene_prediction_view' => array(	  
      'template' => 'gene_prediction_view',
      'path' => $core_path."/theme/templates",	
      'variables' => array('data' => NULL),	  
    ),	
    'mapped_dataset_view' => array(
      'template' => 'mapped_dataset_view',
      'path' => $core_path."/theme/templates",
      'variables' => array('data' => NULL),
    ),	
   'datasets_table' => array(
      'variables' => array('header' => NULL, 'rows' => NULL, 'attributes' => array(), 'caption' => NULL, 'colgroups' => array(), 'sticky' => TRUE, 'empty' => ''),
    ),
  );
}
