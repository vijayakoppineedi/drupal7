<?php

/**
 * @file
 * A dataset module creates various forms and saves the data in database as 
 * well in flat csv files
 */
 
//define('FROM_ADDRESS', '"NAL-i5k"<i5k@ars.usda.gov>');
//define('FROM_ADDRESS', 'vijaya.itsme@gmail.com');

/**
 * Implementation of hook_menu().
 */
function datasets_menu() {
  $items = array();
 
  $items['datasets/mapped'] = array(
    'title' => 'Add Mapped Dataset Information',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mapped_dataset'),    
    'access callback' => 'dataset_access_callback',
    'access arguments' => array('access datasets'),
    'type' => MENU_CALLBACK,
    'weight' => 100,
  );
  
  $items['datasets/request-project'] = array(
    'title' => 'Genome project initial inquiry form',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('request_project'),    
    'access callback' => 'dataset_access_callback',
    'access arguments' => array('access datasets'),
    'type' => MENU_CALLBACK,
    'weight' => 100,
  );
  
  $items['datasets/assembly-data'] = array(
    'title' => 'Add Genome Assembly Information',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('assembly_data'),    
    'access callback' => 'dataset_access_callback',
    'access arguments' => array('access datasets'),
    'type' => MENU_CALLBACK,
    'weight' => 100,
  );
  
  $items['datasets/gene-prediction'] = array(
    'title' => 'Add Gene Prediction Information',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gene_prediction'),   
    'access callback' => 'dataset_access_callback', 
    'access arguments' => array('access datasets'),
    'type' => MENU_CALLBACK,
    'weight' => 100,
  );
  
  $items['register/project-dataset/account'] = array(
    'title' => 'Register for a Project or Dataset Submission Account',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('project_dataset_submission_account'),
    'access arguments' => array('access register form'),
    'type' => MENU_CALLBACK,
    'weight' => 100,
  );


  $items['admin/structure/datasets'] = array(
    'title' => 'Datasets',
    'description' => 'List of Organism\'s for approve/reject',
    'page callback' => 'dataset_cordinator_organisms',	   
    'access arguments' => array('administer datasets'),		
    'file' => 'datasets.admin.inc',
  );
  
  $items['admin/structure/datasets/list'] = array(
    'title' => 'Request Project List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10
  );  

  $items['admin/structure/datasets/report'] = array(
    'title' => 'Datasets Report',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dataset_report'),
    'access arguments' => array('administer datasets'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'datasets.admin.inc',
  );

  $items['datasets_og/%/view'] = array(
    'title' => 'View assembly information',
    'page callback' => 'assembly_information_view',
    'page arguments' => array(1),  
    'access arguments' => array('administer datasets'),		
    'type' => MENU_CALLBACK,
    'file' => 'datasets.admin.inc',
  );  
 
  $items['datasets_gp/%/view'] = array(
    'title' => 'View Gene prediction Information',
    'page callback' => 'gene_prediction_view',
    'page arguments' => array(1),
    'access arguments' => array('administer datasets'),
    'type' => MENU_CALLBACK,
    'file' => 'datasets.admin.inc',
  );
 
   $items['datasets_md/%/view'] = array(
    'title' => 'View Mapped dataset information',
    'page callback' => 'mapped_dataset_view',
    'page arguments' => array(1),
    'access arguments' => array('administer datasets'),
    'type' => MENU_CALLBACK,
    'file' => 'datasets.admin.inc',
  );
 
  $items['datasets/organism/%/edit'] = array(
    'title' => 'Approve or Reject the requested organism',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('datasets_organism_approval', 2),  
    'access arguments' => array('administer datasets'),		
    'type' => MENU_CALLBACK,
    'file' => 'datasets.admin.inc',
  );
 // echo "test "; print_r($items);echo "</pre>";exit;
  return $items;
}
/**
 * Implements hook_permission().
 */
function datasets_permission() {
  return array(
    'administer datasets' => array(
      'title' => t('Administer datasets'),
    ),
    'access datasets' => array(
      'title' => t('Access datasets'),
    ),
    'access register form' => array(
      'title' => t('access register form'),	
    ),
  );
}

/**
 *  function dataset_access_callback
 */
function dataset_access_callback() {
  global $user;
  if ( arg(0) == 'datasets' && $user->uid == 0 ) {
    drupal_goto('/user/login', array('query' => drupal_get_destination()));
  }
  return TRUE;
}



/**
 *  hook_form() Form to create mapped dataset
 */
function mapped_dataset($form, &$form_state) {
  // Because we have many fields with the same values, we have to set
  // #tree to be able to access them.
  //$form['#tree'] = TRUE;
  
  $form['#attached']['css'] = array(
    drupal_get_path('module', 'datasets') . '/css/dataset.css',
  );
  
  $web_apollo_organism = variable_get('web_apollo_organism');
  if(!empty($web_apollo_organism)) {    
    $organism_options = get_webapollo_organisms($web_apollo_organism); 
  }
  ksort($organism_options, 2);
   
  $form['organism'] = array(
    '#type' => 'select',
    '#title' => t('Organism'),
    '#options' => $organism_options,
    '#multiple' => FALSE,
    '#required' => TRUE,	
  );
 
  // To make the fieldset collapsible
  $form['data_provider'] = array(
    '#type' => 'fieldset',
    '#title' => t('Data provider'),
    '#collapsible' => TRUE, // Added
    '#collapsed' => FALSE,  // Added
  );
  
 $form['data_provider']['name'] = array(
    '#type' => 'textfield', 
    '#title' => t('Full Name'),    
    '#maxlength' => 255,
    '#required' => TRUE,
  );
  
  $form['data_provider']['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email Address'),
    '#maxlength' => 255,
    '#required' => TRUE,
  );
  
  $form['data_provider']['affiliation'] = array(
    '#type' => 'textfield',
    '#title' => t('Affiliation'),
    '#required' => TRUE,
  );  
  
  $form['geo_location'] = array(
    '#type' => 'textfield',
    '#title' => t('Geo location'),
    '#required' => FALSE,
	'#description' => "Geographical localtion of specimen collection (Country, Site, Latitude, Longitude)",	
  );
  $form['tissues_located'] = array(
    '#type' => 'textfield',
    '#title' => t('Tissues/Life stage<br> included'),	
    '#required' => FALSE,
	'#description' => "<br>(Whole individual/ antenna / pooled larva / pooled adult female/ etc.)",	
  );
  
  $gender_options = Array( '' => 'Select',
			   'Female' => 'Female',
                           'Male' => 'Male', 
			   'Pooled' => 'Pooled',
			   'NA' => 'Other/NA',
                           );
  $gender_selected = isset($form_state['values']['data_gender']) ? $form_state['values']['data_gender'] : key($gender_options);
  $form['gender'] = array(
    '#type' => 'select',
    '#options' => $gender_options, 
    '#title' => t('Sex'),
    '#default_value' => $gender_selected,
    '#ajax' => array(      
      'callback' => 'gender_dropdown_callback',
      'wrapper' => 'gender_textfield',
    ),
    '#limit_validation_errors' => array(),		
    '#required' => FALSE	
  );
    
  $form['gender_textfield'] = array(
    '#prefix' => '<div id="gender_textfield">',
    '#suffix' => '</div>',
    '#type' => 'fieldset',    
  );

  if (isset($form_state['input']['gender']) && ($form_state['input']['gender'] == 'NA')) { 	
    $form['gender_textfield']['other_gender'] = array(
      '#type' => 'textfield',
      '#title' => t('Other/NA (Sex)'),	  
    );
  }  
  
  $form['sequence_platform'] = array(
    '#type' => 'textfield',
    '#title' => t('Sequencing platform and version'),	
    '#required' => FALSE,
	'#description' => "(Illumina Hi-Seq 200 bp)",	
  );  
  $publish_options = Array('' => 'Select', 
			   'Yes' => 'Yes',
                           'No' => 'No'); 
  $selected = isset($form_state['values']['is_publish']) ? $form_state['values']['is_publish'] : key($publish_options);
  
  $form['is_publish'] = array(
    '#type' => 'select',
    '#options' => $publish_options, 
    '#title' => t('Are the data published?'),
    '#default_value' => $selected,
    '#ajax' => array(      
      'callback' => 'data_publish_dropdown_callback',
      'wrapper' => 'publish',
    ),		
    '#required' => TRUE	
  );
    
  $form['publish'] = array(
    '#prefix' => '<div id="publish">',
    '#suffix' => '</div>',
    '#type' => 'fieldset',    
  );

  // Since dropdown return TRUE or FALSE, we have to check that
  // $form_state has been filled as well as what it contains.
  if (!empty($form_state['input']['is_publish']) && isset($form_state['input']['is_publish'])) {      

    $description = ($form_state['input']['is_publish'] == 'Yes')? t('please provide citation'):t('please indicate whether <a href="http://www.ncbi.nlm.nih.gov/pmc/articles/PMC3073843/?tool=pubmed" target="_BLANK">Toronto</a>/<a href="http://www.wellcome.ac.uk/stellent/groups/corporatesite/@policy_communications/documents/web_document/wtd003207.pdf" target="_BLANK">Ft. Lauderdale</a> conditions of data re-use should apply');

//    $description = ($form_state['input']['is_publish'] == 'Yes')? t('please provide citation'):t('please indicate whether Toronto/Ft. Lauderdale conditions of data re-use should apply');	
    $publish_title = 'publish_field_data';	
    $form['publish'][$publish_title] = array(
      '#type' => 'textfield',
      '#title' => t('If ').$form_state['input']['is_publish'].', '.$description,
    );
  } 
  // To make the fieldset collapsible
  $form['analysis_method'] = array(
    '#type' => 'fieldset',
    '#title' => t('Analysis Method'),
    '#collapsible' => TRUE, // Added
    '#collapsed' => FALSE  // Added
  );
  $form['analysis_method']['descriptive_track'] = array(
    '#type' => 'textfield',
    '#title' => t('Descriptive track<bR> name'),
    '#required' => TRUE,
    '#description' => "<Br>(this is what the users will see in Web Apollo, so short yet explanatory is best)",	
  );  
  
  $form['analysis_method']['data_source_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Data source URL'),
    '#required' => FALSE,
  );   
  $form['analysis_method']['program'] = array(
    '#type' => 'textfield',
    '#title' => t('Program'),	
    '#required' => TRUE	
  );
  $form['analysis_method']['version'] = array(
    '#type' => 'textfield',
    '#title' => t('version'),	
    '#required' => TRUE	
  );
  $form['analysis_method']['additional_info'] = array(
    '#type' => 'textfield',
    '#title' => t('Additional Information'),	
    '#description' => t('Special settings or parameters used.'),
    '#required' => FALSE
  );
  
  $form['analysis_method']['dataset_entry'] = array(
    '#type' => 'fieldset',
    '#title' => t('Other Methods'),
    '#prefix' => '<div id="entry-fieldset-wrapper">',
    '#suffix' => '</div>',
  );

  if (empty($form_state['pnum_methods'])) {
    $form_state['pnum_methods'] = 1;
  }

  for ($i = 0; $i < $form_state['pnum_methods']; $i++) {
    $form['analysis_method']['dataset_entry']['other_methods_'.$i] = array(
	'#type' => 'textfield',
        '#title' => '',
        '#size' => 22,
        '#description' => t('Such as adapter-trimming, barcoding, QC, etc'),
        '#attributes' => array('multiple' => 'multiple'),
    );
  }

  $form['analysis_method']['dataset_entry']['add_other_methods'] = array(
    '#type' => 'submit',
    '#value' => t('Add more methods'),
    '#submit' => array('methods_add_more_add_one'),
    '#ajax' => array(
      'callback' => 'methods_add_more_callback',
      'wrapper' => 'entry-fieldset-wrapper',
    ),
    '#limit_validation_errors' => array(), // No elements will be validated
  );
  if ($form_state['pnum_methods'] > 1) {
    $form['analysis_method']['dataset_entry']['remove_other_methods'] = array(
		'#type' => 'submit',
		'#value' => t('Remove the latest method'),
		'#submit' => array('methods_remove_latest_one'),
		'#ajax' => array(
			'callback' => 'methods_add_more_callback',
			'wrapper' => 'entry-fieldset-wrapper',
		),
		'#limit_validation_errors' => array(), // No elements will be validated
	);
  } 
  $form['upload_entry'] = array(
    '#type' => 'fieldset',
    '#title' => t('File Information'),
	'#prefix' => '<div id="upload-fieldset-wrapper">',
    '#suffix' => '</div>',
	'#collapsible' => TRUE, // Added
    '#collapsed' => FALSE,  // Added
  );
  $form['upload_entry']['markup_text'] = array(
    '#prefix' => '<div id="files_markup">',
    '#markup' => t('Please enter the name and md5sum of your file(s). If you do not have an md5sum for your file, enter NA (not recommended for larger files). We will send you information on how to share the files themselves in a subsequent email.<br>'),
    '#suffix' => '</div>'
  );


  if (empty($form_state['pnum_upload'])) {
    $form_state['pnum_upload'] = 1;
  }

  for ($i = 0; $i < $form_state['pnum_upload']; $i++) {    
    //Parent container
    $form['upload_entry']['upload_wrapper'][$i] = array(
    '#prefix' => '<div class="two-col">',
    '#suffix' => '</div>'
    );
	$flag = ($i == 0)?TRUE:FALSE;
    $form['upload_entry']['upload_wrapper']['filename_'.$i] = array(
		'#type' => 'textfield',
        '#title' => 'Filename',
        '#maxlength' => 255,       
        '#prefix' => '<div class="f_class">',
	   	'#suffix' => '</div>',	
		'#required' => $flag,
        '#attributes' => array('multiple' => 'multiple'),
    );
	$form['upload_entry']['upload_wrapper']['md5sum_'.$i] = array(
		'#type' => 'textfield',
        '#title' => 'md5sum',
		'#prefix' => '<div class="m_class">',
	   	'#suffix' => '</div>',
        '#maxlength' => 255,	
		'#required' => $flag,		
		'#attributes' => array('multiple' => 'multiple'),
    );
  }

  $form['upload_entry']['add_other_uploads'] = array(
    '#type' => 'submit',
    '#value' => t('Add another file'),
    '#submit' => array('upload_add_more_add_one'),
    '#ajax' => array(
        'callback' => 'upload_add_more_callback',
        'wrapper' => 'upload-fieldset-wrapper',
    ),
	'#limit_validation_errors' => array(), // No elements will be validated
  );
  if ($form_state['pnum_upload'] > 1) {
	$form['upload_entry']['remove_other_uploads'] = array(
		'#type' => 'submit',
		'#value' => t('Remove latest one'),
		'#submit' => array('upload_remove_latest_one'),
		'#ajax' => array(
			'callback' => 'upload_add_more_callback',
			'wrapper' => 'upload-fieldset-wrapper',
		),
		'#limit_validation_errors' => array(), // No elements will be validated
  );
  }
  
  // Enabling honeypot to avoid spam
  honeypot_add_form_protection($form, $form_state, array('honeypot', 'time_restriction'));
  /*$form['captcha'] = array(
    '#type' => 'captcha',
    '#captcha_type' => 'datasets/Math',
  );*/


  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  
  return $form;
}

/**
 * mapped dataset form validation
 *
 * Data provider name, affiliation should enter only letters @ - _.
 * Email validation
 * Data source url validation
 *
 */
function mapped_dataset_validate($form, &$form_state) {
  $values = $form_state['values'];
// echo "<prE>"; print_r($values);echo "</prE>";exit;
  $name = $values['name'];
  if (!preg_match('!^[\w @-]*$!', $name)){
     form_set_error('name', t('Your Name can only contains numbers, letters @  - _.'));
  }
  if (isset($values['email']) && !valid_email_address($values['email'])) {
    form_set_error('email', t('You must enter a valid e-mail address.'));
  }
  $affiliation = $values['affiliation'];
  if (!preg_match('!^[\w @-]*$!', $affiliation)){
     form_set_error('affiliation', t('Your 
	 Affiliation can only contains numbers, letters @  - _.'));
  }

   if(!empty($values['is_publish']) && empty($values['publish_field_data'])) {
     $description = ($values['is_publish'] == 'Yes')? t('please provide citation'):t('please indicate whether <a href="http://www.ncbi.nlm.nih.gov/pmc/articles/PMC3073843/?tool=pubmed" target="_BLANK">Toronto</a>/<a href="http://www.wellcome.ac.uk/stellent/groups/corporatesite/@policy_communications/documents/web_document/wtd003207.pdf" target="_BLANK">Ft. Lauderdale</a> conditions of data re-use should apply');
    form_set_error('publish_field_data', t('The field \'If '.$values['is_publish']).' '.$description.'\' is required');
  }
 
  if (!empty($values['data_source_url']) && !valid_url($values['data_source_url'], 'TRUE')) {
    form_set_error('data_source_url', t('You must enter a valid url.'));
  }
 
  foreach($values as $key => $value) {
    if(preg_match('/^filename_/', $key, $match)) {
      if(!preg_match('!^[\w .-/]*$!', $value)) {
        form_set_error($key, t('Your filename can only contains numbers, letters -_.'));
      }

      $file = explode('_',$key);
      $file_name = 'filename_'.$file[1];
      $md5_sum = 'md5sum_'.$file[1];
      if(!empty($values[$file_name]) && empty($values[$md5_sum])) {
        form_set_error($md5_sum, t('You must enter md5sum '.($file[1]+1).'.'));
      }
    }
    if(preg_match('/^md5sum_/', $key, $match)) {
      if(!preg_match('!^[\w .-/]*$!', $value)) {
        form_set_error($key, t('Your md5sum can only contains numbers, letters -_.'));
      }
      $md5_key = explode('_', $key);
      if(empty($values['filename_'.$md5_key[1]]) && !empty($values['md5sum_'.$md5_key[1]])) {
        form_set_error('filename_'.$md5_key[1], t('You must enter filename '.($md5_key[1]+1).'.'));
      }
    }

    if(preg_match('/^other_methods_/', $key, $match_methods)) {
      if(!preg_match('!^[\w -]*$!', $value)) {
        form_set_error($key, t('Your other methods field can only contains numbers, letters -_.'));
      }
    }
  } //foreach loop close
}

/**
 * hook_form submit
 */
function mapped_dataset_submit($form, &$form_state) {
// echo "<pre>"; print_r($form_state['values']);echo "</prE>";
  global $user;  
  $values = $form_state['values'];

  $timestamp = time();

  // Get the organism fullname rather than short name 
  /*$annotation = 1;
  $web_apollo_organism = variable_get('web_apollo_organism');
  $organism_data = get_webapollo_organisms($web_apollo_organism, $annotation); */

  $web_apollo_organism = variable_get('web_apollo_organism');
  if(!empty($web_apollo_organism)) {
    $organism_list = get_webapollo_organisms($web_apollo_organism);
  }

  $exclude_fields = Array('i5kurl', 'honeypot_time', 'add_other_methods', 'remove_other_methods', 'add_other_uploads', 'remove_other_uploads', 'submit', 'form_build_id', 'form_token', 'form_id', 'op','captcha_token','captcha_sid', 'captcha_response', 'url', 'captcha');
  $names_col = Array();
  $values_col = Array();
  $created = time(); $other_methods = ''; $filename = ''; $md5sum = '';

  foreach($values as $key => $value) {
    if(!in_array($key, $exclude_fields)) {
      if(preg_match('/^other_methods_/', $key)) {
        $other_methods .= check_plain($value).",";
      }
      else if(preg_match('/^filename_/', $key)) {
        $filename .= check_plain($value).",";
      }
      else if(preg_match('/^md5sum_/', $key)) {
        $md5sum .= check_plain($value).",";
      }
      else if(isset($value) && !empty($value)){
       array_push($names_col, $key);
       array_push($values_col, "'".check_plain($value)."'");
      }
    }
  }
  $other_methods = rtrim($other_methods, ',');
  $filename = rtrim($filename, ',');
  $md5sum = rtrim($md5sum, ',');
  array_push($names_col, 'other_methods');
  array_push($values_col, "'".$other_methods,"'");
  array_push($names_col, 'filename');
  array_push($values_col, "'".$filename."'");
  array_push($names_col, 'md5sum');
  array_push($values_col, "'".$md5sum."'");
  array_push($names_col, 'uid');
  array_push($values_col, $user->uid);
  array_push($names_col, 'created');
  array_push($values_col, $created);

  $names = implode(',', $names_col);
  $data = implode(',', $values_col);

  //echo "insert into public.ds_mapped_dataset($names) values($data)";exit;
  db_query("insert into public.ds_mapped_dataset($names) values($data)");
 
  
  // E-mail address of the sender: as the form field is a text field.
  $from = FROM_ADDRESS;
  $to_address = $values['email'];
  $values['organism'] = $organism_list[$values['organism']];

//echo "param <pre>"; print_r($values);echo "</prE>";exit;
  // Send the e-mail to the recipients using the site default language.
  $sent =  drupal_mail('datasets', 'mapped_dataset_email', $to_address, language_default(), $values, $from, TRUE);

  if(empty($sent['result']) || ($sent['result'] != 1)) {
    /*handle send fail, $sent ===false when mail fails, but it won't always recognize a failure*/
    drupal_set_message(t('Failed to send e-mail.'));
  } else
    drupal_set_message(t('Your mapped dataset data was submitted successfully. For your reference we are sending out an email with the fields filled.'));
}

// ---------------  AJAX CALLBACK  FUNCTIONS FOR TEXT FIELD-----------------
function data_publish_dropdown_callback($form, &$form_state) {
  return $form['publish'];
}


// --------------AJAX CALLBACK FOR GENE ASSEMBLY PUBLISH DROP DOWN --------
function gene_data_publish_dropdown_callback($form, &$form_state) {
  return $form['gene_set']['publish'];
}

function gender_dropdown_callback($form, $form_state) {
 return $form['gender_textfield'];  
}

/**
 * Other methods callbacks
 */
function methods_add_more_add_one($form, &$form_state) {
    if (!isset($form_state['pnum_methods'])) {
        $form_state['pnum_methods'] = 0;
        $form_state['pnum_methods']++;
    }

    $form_state['pnum_methods']++;
    $form_state['rebuild'] = TRUE;
}

function methods_add_more_callback($form, $form_state) {
    return $form['analysis_method']['dataset_entry'];
}

function methods_remove_latest_one($form, &$form_state) {
  if ($form_state['pnum_methods'] > 1) {
    $form_state['pnum_methods']--;
  }
  $form_state['rebuild'] = TRUE;
}

/**
 * Upload filename and md5sum callbacks
 */
function upload_add_more_add_one($form, &$form_state) {
    if (!isset($form_state['pnum_upload'])) {
        $form_state['pnum_upload'] = 0;
        $form_state['pnum_upload']++;
    }

    $form_state['pnum_upload']++;
    $form_state['rebuild'] = TRUE;
}

function upload_add_more_callback($form, $form_state) {
    return $form['upload_entry'];
}

function upload_remove_latest_one($form, &$form_state) {
  if ($form_state['pnum_upload'] > 1) {
    $form_state['pnum_upload']--;
  }
  $form_state['rebuild'] = TRUE;
}
/**
 * hook_form_alter
 * 
 * Organise captcha field to be right above the submit button 
 */
function datasets_form_alter(&$form, &$form_state, $form_id) { 
  if($form_id == 'fillpdf_form_node_form') {
    // echo "<pre>"; print_r($form); echo "</pre>";
     $form['field_photographer']['und'][0]['#title'] = 'Photographer/Author';
     $form['#title'] = 'Image use permission form';
     $form['fillpdf_header'] = array(
        '#type' => 'item',
        '#markup' => '<div><h5>
The United States Department of Agriculture, Agricultural Research Service, National Agricultural Library (NAL) requests your permission to publish in all formats the material(s) indicated below at the i5K Workspace@NAL website. The target audience for the website are students, educators, researchers, and members of the general public. The main website is available without access restrictions at <a href="https://i5k.nal.usda.gov">https://i5k.nal.usda.gov</a>, and includes resources housed on multiple servers. 
As with all Federal Government-issued content, the i5k Workspace@NAL is not copyrightable. Copyrighted material on the website will be acknowledged and accompanied by proper copyright notices. Please note that no licensing fees or royalties will be paid. To grant permission to publish the above-referenced material(s), fill out the form below,  sign the resulting PDF and e-mail to <a href="mailto:i5k@ars.usda.gov">i5k@ars.usda.gov</a>, or fax the signed form to "Attention: Christopher Childers".<hr> 
I hereby grant permission to the United States Department of Agriculture to publish the material(s) specified below in the i5K Workspace@NAL. By Filling out and signing the form below, I represent myself as the sole owner of all rights in and to the photograph(s)/illustrations and that the photographs are original and do not infringe upon any statutory copyright or any common law right or proprietary right of any individual or organization. There is no fee for this use.<br> 
</h5></div>',
        '#weight' => -1,
     );
     $form['field_credit_line_and_copyright']['#suffix'] = '<div id="credit_copyright">(e.g. CC-­‐BY-­‐SA; see https://creativecommons.org or http://copyright.gov for more information)</div>';
  }

}

/**
 * Default implementation of hook_captcha().
 */
function datasets_captcha($op, $captcha_type = '') {
  $result = captcha_captcha($op, $captcha_type);  
  
    if (($op == 'generate') && ($captcha_type == 'Math')) {
      $result = array();
      $answer = mt_rand(1, 20);
      $x = mt_rand(1, $answer);
      $y = $answer - $x;
      $result['solution'] = "$answer";
  
      // Build challenge widget.
      // Note that we also use t() for the math challenge itself. This makes
      // it possible to 'rephrase' the challenge a bit through localization
      // or string overrides.
      $result['form']['captcha_response'] = array(
        '#type' => 'textfield',
        '#title' => t('Math question'),
        '#description' => t('Solve this simple math problem and enter the result to help us reduce spam. E.g. for 1+3, enter 4.'),
        '#field_prefix' => t('@x + @y = ', array('@x' => $x, '@y' => $y)),
        '#size' => 4,
        '#maxlength' => 2,
        '#required' => TRUE,
      );
       
    }
  return $result;
}

/**
 * hook_form 
 * - Creates add organism form
 * - Save the data in public schema cordinator_organism table
 */
function request_project($form, &$form_state) {

  $form['#attached']['css'] = array(
    drupal_get_path('module', 'datasets') . '/css/request_project.css',
  );
  $form['header_text'] = array(
    '#markup' => '<div id="text">Thank you for your interest in submitting your genome project to the i5k Workspace! Please answer the following questions to help us decide if the resources at the i5k Workspace are a good fit for your project.</div>',
  );

  $form['genus'] = array(
    '#type' => 'textfield', 
    '#title' => t('Genus'),    
    '#required' => TRUE,
  );
  
  $form['species'] = array(
    '#type' => 'textfield',
    '#title' => t('Species'),
    '#required' => TRUE,
  );

  $form['ncbi_taxid'] = array(
    '#type' => 'textfield',
    '#title' => t('NCBI Taxonomy ID'),
    '#required' => TRUE,
  );
  
  $form['common_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Common Name'),
    '#required' => TRUE,
  );

  $form['is_genome_assembly'] = array(
    '#type' => 'textfield',
    '#title' => t('Is the genome assembly already hosted at another genome portal, or is there another genome portal that would also be<br> appropriate to host your dataset (e.g. VectorBase, HGD)?'),
    '#required' => TRUE,
  );  
  
  $ncbi_options = Array('' => 'Select',
 			'Yes' => 'Yes',
                        'No' => 'No'
                       );

  $ncbi_selected = isset($form_state['values']['is_ncbi_submitted']) ? $form_state['values']['is_ncbi_submitted'] : key($ncbi_options); 

  $form['is_ncbi_submitted'] = array(
    '#type' => 'select',
    '#options' => $ncbi_options,
    '#title' => t('Have you submitted the genome assembly to NCBI, or another INSDC member?'),
    '#default_value' => $ncbi_selected,
    '#required' => TRUE
  );
 
  $assembly_options = Array('' => 'Select',
 			    'Yes' => 'Yes',
                            'No' => 'No'
                           );
  $assembly_selected = isset($form_state['values']['is_assembly']) ? $form_state['values']['is_assembly'] : key($assembly_options);  

  $form['is_assembly'] = array(
    '#type' => 'select',
    '#options' => $assembly_options,    
    '#title' => t('Is this a re-assembly or new assembly of an existing i5k Workspace organism ?'),
    '#default_value' => $assembly_selected,
    '#required' => TRUE,
  ); 
 
  $fund_options = Array('' => 'Select',
  			'Yes' => 'Yes',
                        'No' => 'No'
                       );
  $fund_selected = isset($form_state['values']['involved_in_generation']) ? $form_state['values']['involved_in_generation'] : key($fund_options);  

  $form['involved_in_generation'] = array(
    '#type' => 'select',
    '#options' => $fund_options,
    '#title' => t('Were you involved in the generation of this genome assembly?'),
    '#default_value' => $fund_selected,
    '#required' => TRUE,
  );

  $form['description'] = array(
    '#type' => 'textarea',
    '#title' => t('Briefly describe your plans for this genome project at the i5k Workspace (e.g. are you interested in community curation?).'),
    '#required' => TRUE,
  );

  $form['contact_text'] = array(
    '#markup' => '<div id="text">Please add your contact information so we can get in touch with you about your genome project.</div>'
  ); 

  $form['fullname'] = array(
    '#type' => 'textfield',
    '#title' => t('Full Name'),
    '#required' => TRUE,
  );

  $form['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email'),
    '#required' => TRUE,
  );


  // Enabling honeypot to avoid spam
 // honeypot_add_form_protection($form, $form_state, array('honeypot', 'time_restriction'));
 /* $form['captcha'] = array(
    '#type' => 'captcha',
    '#captcha_type' => 'datasets/Math',
  );*/

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  
  return $form;
}

/**
 * hook_form_validation
 *
 * Email validation
 * taxid is unique for each organism
 */
function request_project_validate($form, &$form_state) {
  if (!valid_email_address($form_state['values']['email'])) {
    form_set_error('email', t('You must enter a valid e-mail address.'));
  }
  $genus = $form_state['values']['genus'];
  $species = $form_state['values']['species'];
  $is_species_exists = db_select('organism','o')->fields('o',array('organism_id'))->condition('o.genus',$genus,'=')->condition('o.species', $species, '=')->execute()->fetchField();

  if(!empty($is_species_exists)) {
    form_set_error('genus', t('The species "'.$genus.' '.$species.'" already existed in database.'));
    form_set_error('species');
  }
 
}

/**
 * hook_form_submit
 * 
 */
function request_project_submit($form, &$form_state) {
  $values = $form_state['values'];
  // echo "<pre>"; print_r($values);echo "</pre>";exit;

  $created = time();   
  // data variable is used to send values to mail message
  $data = Array(
        'genus' => check_plain($values['genus']),
        'species' => check_plain($values['species']),
        'ncbi_taxid' => check_plain($values['ncbi_taxid']),
        'common_name' => check_plain($values['common_name']),
        'genome_assembly_hosted' => check_plain($values['is_genome_assembly']),
        'is_ncbi_submitted' => check_plain($values['is_ncbi_submitted']),
        'is_assembly' => check_plain($values['is_assembly']),
        'involved_in_generation' => check_plain($values['involved_in_generation']),
        'description' => trim(check_plain($values['description'])),
        'fullname' => trim(check_plain($values['fullname'])),
        'email' => check_plain($values['email']),
        'created' => $created
      );
//echo "<pre>"; print_r($data); echo "</pre>";exit;
  // drupal_write_record('ds_request_project', $data); 
  $result = db_insert('ds_request_project')->fields($data)->execute() or die("Unable to insert data");

  //Send the e-mail to the recipients using the site default language.
  $to_user = $values['email'];
  $from_address = FROM_ADDRESS; 
  $send_user =  drupal_mail('datasets', 'email_acknowledgement_touser', $to_user, language_default(), $data, $from_address, TRUE);
  if(empty($send_user['result']) || ($send_user['result'] != 1)) {
    drupal_set_message(t('Failed to send e-mail to the submitted user.'));
  }

  //Send email to the admin - when user submitted the data.
  $recipient = FROM_ADDRESS;
  $from = $values['email'];
  $sent =  drupal_mail('datasets', 'request_project_email', $recipient, language_default(), $data, $from, TRUE);
  if(empty($sent['result']) || ($sent['result'] != 1)) {
    /*handle send fail, $sent ===false when mail fails, but it won't always recognize a failure*/
    drupal_set_message(t('Failed to send e-mail to the i5k admin.'));
  }
  else {
    drupal_set_message("Your Project Request '".$values['genus']." ".$values['species']."' was successfully created. You will receive an email once your request is approved by an administrator."); 
  }	
}

/**
 * drupal mail looks for a function that matches the first parameter _ mail
 * to build the message
 */		
function datasets_mail($key, &$message, $params) {
  global $base_url, $base_path;
  $language = $message['language'];

  $variables = array(    
    '!organism' => $params['genus'].' '.$params['species'],  
    '!user' => $params['cordinator_name'],
    '!form' => url($_GET['q'], array('absolute' => TRUE)),
  );

  $other_methods = ''; $filename_md5sum = '';
  foreach($params as $keyname => $value) {
    if(preg_match('/^other_methods_/', $keyname)) {
      $other_methods .= $value.",";
    }
    else if(preg_match('/^filename_/', $keyname) && !empty($value)) {
      $filename_md5sum .= "Filename: ".$value."<br>";
    }
    else if(preg_match('/^md5sum_/', $keyname) && !empty($value)) {
      $filename_md5sum .= "md5sum: ".$value."<br><br>";
    }
  }

  $other_methods = rtrim($other_methods, ',');   

  switch($key) {
    //switching on $key lets you create variations of the email based on the $key parameter
    case 'email_acknowledgement_touser':
      $message['subject'] = t('Genome project submission inquiry at the i5k Workspace');
      $message['body'][] = t('Thank you for your interest in submitting a genome project to the i5k Workspace! We will let you know within a few days whether your project request has been accepted, or whether we need to have more information from you before initiating your project.');
      $message['body'][] = '<br><BR>Best, <br><bR>The i5k Workspace team';
      $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed'; 
      break;   
    case 'request_project_email':       
      $message['subject'] = t('New project request for "'.$params['genus'].' '.$params['species'].'"', $variables, array('langcode' => $language->language)); 
 	     //$variabless required even if not used to get $language in there

      //the email body is here, inside the $message array	  
      $message['body'][] = t($params['fullname']." requested for new project.<br><br><b>Below are the details:</b>", $variables, array('langcode' => $language->language));	 
      $message['body'][] = '<br><b>Genus:</b> '.$params['genus'].'
                            <br><b>Species:</b> '.$params['species'].'
			    <br><b>NCBI Taxid: </b>'.$params['ncbi_taxid'].'
			    <br><b>Common Name: </b>'.$params['common_name'].'
                            <br><b>Is the genome assembly already hosted at another genome portal, or is there another genome portal that would also be appropriate to host your dataset: </b>'.$params['genome_assembly_hosted'].'
                            <Br><b>Have you submitted the genome assembly to NCBI, or another INSDC member?: </b>'.$params['is_ncbi_submitted'].'
			    <br><b>Is this a re-assembly or new assembly of an existing i5k Workspace organism ? :</b> '.$params['is_assembly'].'
                            <br><b>Were you involved in the generation of this genome assembly? : </b>'.$params['involved_in_generation'];
                      
     $message['body'][] =  '<br><b>Briefly describe your plans for this genome project at the i5k Workspace: </b>'.$params['description'].'  <bR><b>FullName: </b>'.$params['fullname'].'
                            <br><b>Email:</b> '.$params['email'];
      $message['body'][] = "<br><br>To view more click the <a href='".$GLOBALS['base_url']."/admin/structure/datasets'>Admin</a> Link";

      $message['body'][] = '<br><BR>Best,<br><bR>The i5k Workspace team';
	
      $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
 
      break;
    case 'request_project_approved_email':
      $message['subject'] = t('i5k Workspace Project Request Approved for "'.$params['genus'].' '.$params['species'].'"', $variables, array('langcode' => $language->language));
      $message['body'][] = "Dear ".$params['fullname'].", <br><br>We have approved your project request for ".$params['genus'].' '.$params['species']."."; 
      $message['body'][] = '<br>You can submit your datasets. Please visit <a href="https://i5k.nal.usda.gov/data-submission-overview">https://i5k.nal.usda.gov/data-submission-overview</a> and navigate to the appropriate page to submit your genome assembly or other datasets for this project. <Br><br>Best,<br><bR>The i5k Workspace team';
      $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
      break;
    case 'register_project_submission_account':
      
      $message['subject'] = t("".$params['name']." registered for project or data submission account", $variables, array('langcode' => $language->language)); 
      $message['body'][] = "Below are the user details<br><br> ";
      $message['body'][] = "<b>Name:</b> ".$params['name']."<br>";
      $message['body'][] = "<b>Email:</b> ".$params['email']."<br>";
      $message['body'][] = "<b>Affiliation:</b> ".$params['affiliation']."<br>";
      $message['body'][] = "<b>Tell us about the data you want to submit or the project you want to start:</b> ".$params['content']."<br>";

      $message['body'][] = "<br>To create an user account go to <a href='".$base_url . $base_path . "/admin/people'>". $base_url ." /admin/people</a><br> Then click \"Add User\"<br><br>";
      $message['body'][] = "<p>In the User creation page, manually enter the username, email and a random password twice.<br> 
                            Check the options for:<br>
                            * i5k user<br>
                            * Notify user of new account <br><br>

                            Then click \"Create new account\"<br><br>

                            The user will never see the password we generate for them.  They will be emailed a one time link to reset their password.</p>";

      $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
      break;
    case 'mapped_dataset_email':      
      $message['subject'] = t('Mapped dataset for '.$params['organism'], $variables, array('langcode' => $language->language));	
      $message['body'][] = t("Dear ".$params['name'].", <br><br> Thank you for submitting a mapped dataset for ".$params['organism'].". The i5k Workspace will review your submission and send you information on how to upload your dataset as soon as possible. ", $variables, array('langcode' => $language->language));    

      $message['body'][] = "<h1>Submission details:</h1>"; 
      $message_body = "<b>Data Provider:</b><br>";
      $message_body .= "Name: ".$params['name']."<br>";
      $message_body .= "Email: ".$params['email']."<br>";
      $message_body .= "Affiliation: ".$params['affiliation']."<br><br>";
      if(!empty($params['geo_location']))
        $message_body .= "Geo Location: ".$params['geo_location']."<br>";
      if(!empty($params['tissues_located']))
        $message_body .= "Tissues Located: ".$params['tissues_located']."<br>";
      if(!empty($params['gender'])) {
        $message_body .= "Sex: ".$params['gender']."<br>";
        if(!empty($params['gender']) && ($params['gender'] == 'NA')) 
          $message_body .= "Other/NA (Sex): ".$params['other_gender']."<br>";
      }
      if(!empty($params['sequence_platform']))
        $message_body .= "Sequence Platform: ".$params['sequence_platform']."<br>";
      $message_body .= "Are the data published?: ".$params['is_publish']."<br>";
      $message_body .= "If ".$params['is_publish'].": ".$params['publish_field_data']."<br><br>";
      $message_body .= "<b>Analysis Method:</b><br>";
      $message_body .= "Descriptive track name: ".$params['descriptive_track']."<br>";
      if(!empty($params['data_source_url']))
        $message_body .= "Data source URL: ".$params['data_source_url']."<br>";
      $message_body .= "Program: ".$params['program']."<br>";
      $message_body .= "version: ".$params['version']."<br>";
      if(!empty($params['additional_info']))
        $message_body .= "Additional Information: ".$params['additional_info']."<br>";
      if(!empty($other_methods)) 
        $message_body .= "Other Methods: ".$other_methods."<br>";
	  
      $message_body .= "<br><b>Filename & md5sum:</b><br>";
	  
      $message_body .= $filename_md5sum."<br>";
  
      $message['body'][] = $message_body;
      $message['body'][] = '<Br><br>Best,<br><bR>The i5k Workspace team';
      $message['headers']['Bcc'] = 'i5k@ars.usda.gov';
      $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
      break;
    case 'assembly_dataset_email':      
      $message['subject'] = t('Assembly dataset for '.$params['organism'], $variables, array('langcode' => $language->language));	
      $message['body'][] = t("Dear ".$params['name'].", <br><br> Thank you for submitting  an assembly dataset for ".rtrim($params['organism']).". The i5k Workspace will review your submission and send you information on how to upload your dataset as soon as possible.", $variables, array('langcode' => $language->language));    

      $message['body'][] = "<h1>Submission details:</h1>"; 
      $message_body .= "<b>Genome Co-ordinator information:</b><br>";
      $message_body .= "Name: ".$params['name']."<br>";
      $message_body .= "Email: ".$params['email']."<br><br>";
      $message_body .= "<b>Project Background:</b><bR>";
      $message_body .= "Organism: ".$params['organism']."<bR>";
      $message_body .= "Common name: ".$params['common_name']."<br>";
      $message_body .= "Project description to display in your organism page: ".$params['description']."<bR>";
      if(!empty($params['organism_image_url']))
        $message_body .= "Image URL for your organism page: ".$params['organism_image_url']."<bR>";
     
      $message_body .= "Will you manually curate this assembly using i5k workspace tools? ".$params['is_curate_assembly']."<bR>";
      if(isset($params['is_curate_assembly']) && $params['is_curate_assembly'] == 'Yes') {
        $message_body .= "Co-ordinator name: ".$params['manual_curation_name']."<bR>";
        $message_body .= "Co-ordinator Email: ".$params['manual_curation_email']."<bR>";
        $message_body .= "Do you need assistance developing an Official Gene Set? ".$params['need_assistance']."<bR>";
        if(isset($params['need_assistance']) && ($params['need_assistance'] == 'Yes'))
          $message_body .= "Reason: ".$params['reason']."<bR>";

        $message_body .= "<b>Curation time frame:</b><br>";
        if ($params['no_timeframe'] == 1) {
          $message_body .= "There is no set time frame for curation"; 
        } else { 
          $from_dd = explode('-', $params['time_from']);
          $from_dd_format = $from_dd[1].'-'.$from_dd[2].'-'.$from_dd[0];
          $message_body .= "From Date: ".$from_dd_format."<bR>";
       
          $to_dd = explode('-', $params['time_to']);
          $to_dd_format = $to_dd[1].'-'.$to_dd[2].'-'.$to_dd[0];
          $message_body .= "To Date: ".$to_dd_format."<bR>";
        }
      }

      $message_body .= "<h3>Genome assembly information:</h3>";
      $message_body .= "<b>Assembly Information:</b><bR>";
      $message_body .= "Assembly name: ".$params['assembly_name']."<bR>";
      $message_body .= "Assembly version: ".$params['assembly_version']."<bR>";
      $message_body .= "NCBI/INSDC Genome assembly accession#: ".$params['assembly_accession']."<bR>";
      $message_body .= "Analysis method: ".$params['assembly_method']."<bR>";
      $message_body .= "Is the assembly published: ".$params['is_publish']."<bR>";
      if(isset($params['is_publish']))
        $message_body .= "IF ".$params['is_publish'].":".$params['publish_field_data']."<bR>";
      if(!empty($params['other_notes']))
        $message_body .= "Other notes: ".$params['other_notes']."<bR>";

      $message_body .= "<b>Data source information</b><br>";

      if(!empty($params['geo_location']))
        $message_body .= "Geo Location: ".$params['geo_location']."<br>";

      if(!empty($params['tissues_located']))
        $message_body .= "Tissues Located: ".$params['tissues_located']."<br>";

      if(!empty($params['gender'])) {
        $message_body .= "Sex: ".$params['gender']."<br>";
        if(isset($params['gender']) && $params['gender'] == 'NA')
          $message_body .= "Other/NA: ".$params['other_gender']."<br>";
      }
      if(!empty($params['data_source_strain']))
        $message_body .= "Strain: ".$params['data_source_strain']."<br>";

      if(!empty($params['data_source_notes']))
        $message_body .= "Other notes: ".$params['data_source_notes']."<br>";
      
      $message_body .= "Sequencing platform and version: ".$params['data_source_seqplatform']."<bR>";
      if(!empty($params['data_source_url']))
        $message_body .= "Data source URL: ".$params['data_source_url']."<bR>";
      $message_body .= "<br><b>Filename & md5sum </b>:";
      $message_body .= "<bR>".$filename_md5sum."<br>";
  
      $message['body'][] = $message_body;
      $message['body'][] = '<Br><br>Best,<br><bR>The i5k Workspace team';
      $message['headers']['Bcc'] = 'i5k@ars.usda.gov';
      $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
      break;
    case 'gene_prediction_email':      
      $message['subject'] = t('Gene prediction data for '.$params['organism'], $variables, array('langcode' => $language->language));	
      $message['body'][] = t("Dear ".$params['name'].", <br><br> Thank you for submitting the gene prediction for ".rtrim($params['organism']).". The i5k Workspace will review your submission and send you information on how to upload your dataset as soon as possible. ", $variables, array('langcode' => $language->language));    
      
      $message['body'][] = "<h1>Submission details:</h1>"; 
      $message_body .= "<b>Analysis Methods:</b><br>";
      $message_body .= "Program: ".$params['program']."<br>";
      $message_body .= "Version: ".$params['version']."<br>";
      if(!empty($params['additional_info'])) 
        $message_body .= "Additional Information: ".$params['additional_info']."<br>";
      if(!empty($other_methods))
        $message_body .= "Other Methods: ".rtrim($other_methods, ',')."<br><br>";
      $message_body .= "<b>Analysis Provider:</b><br>";
      $message_body .= "Name: ".$params['name']."<br>";
      $message_body .= "Email: ".$params['email']."<br>";
      $message_body .= "Affiliation: ".$params['affiliation']."<br><br>";
      $message_body .= "<b>Gene set Information:</b><br>";
      $message_body .= "Name: ".$params['gene_name']."<br>";
      $message_body .= "Version: ".$params['gene_version']."<br>";
      $message_body .= "Descriptive Track: ".$params['descriptive_track']."<br>";
      $message_body .= "Is this an Official Gene Set: ".$params['is_ogs']."<br>";
      if($params['is_ogs'] == 'Yes')
        $message_body .= "Should we create gene pages for this gene set?: ".$params['reason']."<br>";
      $message_body .= "Are the data published? ".$params['is_publish']."<br>";
      $message_body .= "If ".$params['is_publish'].": ".$params['publish_field_data']."<br>";
      $message_body .= "Should we make this file available for download in our Data Downloads section?: ".$params['is_download']."<bR>";
      $message_body .= "<br><b>Filename & md5sum:</b>";  
      $message_body .= "<br>".$filename_md5sum;
	  
      $message['body'][] = $message_body;
      $message['body'][] = '<Br><br>best,<br><bR>The i5k Workspace team';
      $message['headers']['Bcc'] = 'i5k@ars.usda.gov';
      $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
      break;
  }
}

/**
 * hook_form 
 * - Create organism and assembly information
 * - Save the data in public schema table
 */
function assembly_data($form, &$form_state) {
  //$form['#tree'] = TRUE;
  $form['#attached']['css'] = array(
    drupal_get_path('module', 'datasets') . '/css/organism_assembly.css',
  );
  $form['#attached']['js'] = array(
    drupal_get_path('module', 'datasets') . '/js/assembly.js',
  );

  $form['#attributes']['enctype'] = "multipart/form-data";
 
  // To make the fieldset collapsible
  $form['cordinator_info'] = array(
    '#type' => 'fieldset',
    '#title' => t('Genome coordinator information'),
    '#attributes' => array('class' => array('cordinator_info', 'collapsible', 'collapsed')),
    '#collapsible' => TRUE, // Added
    '#collapsed' => FALSE,  // Added
  );
  
 $form['cordinator_info']['name'] = array(
    '#type' => 'textfield', 
    '#title' => t('Full Name'),    
    '#maxlength' => 255,
    '#required' => TRUE,
  );
  
  $form['cordinator_info']['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email Address'),
    '#maxlength' => 255,
    '#required' => TRUE,
  );
  
  // Project Background
  $form['project'] = array(
    '#type' => 'fieldset',
    '#title' => t('Project Background'),
    '#attributes' => array('class' => array('project')),
    '#collapsible' => TRUE, // Added
    '#collapsed' => FALSE,  // Added
  );
  
  $web_apollo_organism = variable_get('web_apollo_organism');
  if(!empty($web_apollo_organism)) {    
    $organism_options = get_webapollo_organisms($web_apollo_organism); 
  }

  ksort($organism_options, 2);
   
  $new = Array('New Organism' => 'New Organism');
  $organism_options = array_slice($organism_options, 0, 1, true) + $new + array_slice($organism_options, 1, count($organism_options)-1, true);  

  $form['project']['organism'] = array(
    '#type' => 'select',
    '#title' => t('Organism'),
    '#options' => $organism_options,
    '#ajax' => array(      
      'callback' => 'species_dropdown_callback',
      'wrapper' => 'species',
    ),
    '#limit_validation_errors' => array(),
    '#required' => TRUE,	
  );
  
  $form['project']['species'] = array(
      '#type' => 'fieldset',    	  
      '#prefix' => '<div id="species">',
      '#suffix' => '</div>',    
   );  
  if(!empty($form_state['input']['organism']) && ($form_state['input']['organism'] != 'New Organism')) {
    $species = $organism_options[$form_state['input']['organism']];	
    $organism_result = db_query("SELECT common_name FROM chado.organism WHERE concat(genus,' ',species) = :species", array(':species' => $species))->fetchObject();
    $common_name = (!empty($form_state['input']['common_name']))?$form_state['input']['common_name']:'';
    $attributes = array();
    if(isset($organism_result->common_name) && !empty($organism_result->common_name)) {  
      $common_name = $organism_result->common_name;
      $attributes =  array('readonly' => 'readonly');
    }

    $form['project']['species']['common_name'] = array(
      '#type' => 'textfield', 
      '#title' => t('Common Name'),    	  
      '#value' => $common_name,
      '#maxlength' => 255,
      '#attributes' => $attributes,
      '#required' => FALSE,
    );
  } 
  
  
  $form['project']['description'] = array(
    '#type' => 'textarea',
    '#title' => t('Project description to display in your organism page'),
    '#required' => TRUE,
  );
  $form['project']['organism_image_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Image URL for your organism page. If you have a file instead of a URL, please contact <a href="mailto:i5k@ars.usda.gov">i5k@ars.usda.gov</a>'),
    '#description' => t("Provide the image url"),
  );

  $curate_options = Array('Yes' => 'Yes', 'No' => 'No');
  $form['project']['is_curate_assembly'] = array(
    '#type' => 'select', 
    '#title' => t('Will you manually curate this assembly using i5k workspace tools?'),    
    '#options' => $curate_options,
    '#ajax' => array(      
      'callback' => 'manual_curation_dropdown_callback',
      'wrapper' => 'manual_curation',
    ),
    '#limit_validation_errors' => array(),
    '#required' => TRUE,
  );
  $form['project']['manual_curation'] = array(
    '#type' => 'fieldset',    	
    '#title' => t(''),	 
    '#attributes' => array('class' => array('manual_curation')),	  
    '#prefix' => '<div id="manual_curation">',
    '#suffix' => '</div>',   
    '#collapsible' => TRUE, // Added
    '#collapsed' => FALSE,  // Added	  
  );
  if(!empty($form_state['input']['is_curate_assembly']) && ($form_state['input']['is_curate_assembly'] == 'Yes')) {      
    $form['project']['manual_curation']['is_same'] = array(
      '#type' => 'checkbox',    
      '#title' => t('Is the curation coordinator the same as the genome coordinator?'),      
      '#default_value' =>FALSE, 	  
      '#ajax' => array(
        'callback' => 'name_email_callback',
        'wrapper' => 'name_email',
      ),
    );	
    $form['project']['manual_curation']['name_email'] = array(
      '#type' => 'fieldset',    	
      '#title' => t(''),	 
      '#attributes' => array('class' => array('name_email')),	  
      '#prefix' => '<div id="name_email">',
      '#suffix' => '</div>',   
      '#collapsible' => TRUE, // Added
      '#collapsed' => FALSE,  // Added	  
    );
    $cordinator_name = '';
    $name_attributes = array();
    if($form_state['input']['is_same'] == 1 && !empty($form_state['input']['name'])) {
      $cordinator_name = $form_state['input']['name'];
      $name_attributes = array('readonly' => 'readonly');       
      $form['project']['manual_curation']['name_email']['manual_curation_name'] = array(
        '#type' => 'textfield',
        '#title' => t('Co-ordinator name'),
        '#required' => TRUE,
        '#attributes' => $name_attributes,
        '#value' => $cordinator_name
      );
    } else {
      $form['project']['manual_curation']['name_email']['manual_curation_name'] = array(
        '#type' => 'textfield',
        '#title' => t('Co-ordinator name'),
        '#required' => TRUE,
      );
    } 
	
    $cordinator_email = '';
    $email_attributes = array();
    if($form_state['input']['is_same'] == 1 && !empty($form_state['input']['email'])) {
      $cordinator_email = $form_state['input']['email'];
      $email_attributes = array('readonly' => 'readonly');    
      $form['project']['manual_curation']['name_email']['manual_curation_email'] = array(
        '#type' => 'textfield',    
        '#title' => t('Co-ordinator email'),   
        '#required' => TRUE, 
        '#attributes' => $email_attributes,
        '#value' => $cordinator_email 	  
      );	
    }
    else {
      $form['project']['manual_curation']['name_email']['manual_curation_email'] = array(
        '#type' => 'textfield',
        '#title' => t('Co-ordinator email'),
        '#required' => TRUE
      );
    } 
   $assistance_options = Array('Yes' => 'Yes', 'No' => 'No'); 
   $form['project']['manual_curation']['need_assistance'] = array(
      '#type' => 'select',    
      '#title' => t('Do you need assistance developing an Official Gene Set?'), 
      '#options' => $assistance_options,
      '#ajax' => array(      
           'callback' => 'assistance_dropdown_callback',
           'wrapper' => 'assistance',
      ),
      '#limit_validation_errors' => array(),
      '#required' => TRUE,
    );
   $form['project']['manual_curation']['assistance'] = array(
     '#type' => 'fieldset',
     '#prefix' => '<div id="assistance">',
      '#suffix' => '</div>',	  
   );
   if(isset($form_state['input']['need_assistance']) && ($form_state['input']['need_assistance'] == 'Yes')) {
     $form['project']['manual_curation']['assistance']['reason'] = array(
       '#type' => 'textfield',    	        
       '#title' => t('Reason'),
       '#required' => TRUE,
     ); 
   }

   $form['project']['manual_curation']['tf_condition_text'] = array(
    '#type' => 'fieldset',
    '#title' => t('Specify curation time frame <div id="tf_required">*</div>'),
    '#prefix' => '<div id="tf_condition_text">',
     '#suffix' => '</div>',
    '#attributes' => array('class' => array('tf_or_condition')),
    '#collapsible' => TRUE, // Added
    '#collapsed' => FALSE,  // Added
   );
    
   $form['project']['manual_curation']['tf_condition_text']['time_from'] = array(
      '#type' => 'date_popup',  
      '#date_format' => 'm/d/Y',	  
      '#title' => t(''),
      '#attributes' => array('placeholder' => t('Start date')),	  
      '#ajax' => array(
           'callback' => 'datepopup_callback',
           'wrapper' => 'tf_condition',
      ),
    );

   $form['project']['manual_curation']['tf_condition_text']['time_to'] = array(
     '#type' => 'date_popup',
     '#date_format' => 'm/d/Y',	  
     '#attributes' => array('placeholder' => t('End date')),	  
     '#title' => t(''),  
     '#required' => FALSE,
     '#ajax' => array(
           'callback' => 'datepopup_callback',
           'wrapper' => 'tf_condition',
      ),	  
   );

   $form['project']['manual_curation']['tf_condition1'] = array(
     '#markup' => t('<div id="or_css">(OR)</div>'),
   );
  
   $form['project']['manual_curation']['tf_condition'] = array(
    '#type' => 'fieldset',
    '#title' => t(''),
    '#prefix' => '<div id="tf_condition">',
    '#suffix' => '</div>',
    '#collapsible' => TRUE, // Added
    '#collapsed' => FALSE,  // Added 
  );
     $form['project']['manual_curation']['tf_condition']['no_timeframe'] = array(
       '#type' => 'checkbox',
       '#title' => t('There is no set time frame for curation.'),
       '#default_value' => 0,
       '#ajax' => array(
           'callback' => 'no_timeframe_callback',
           'wrapper' => 'tf_condition_text',
       ),
      '#limit_validation_errors' => array(),
     );
   if ( !empty($form_state['input']['time_to']['date']) || !empty($form_state['input']['time_from']['date'])) {
     $form['project']['manual_curation']['tf_condition']['no_timeframe']['#attributes']['disabled'] = 'disabled';  
   }
 }   
    
  //Genome assembly information
  $form['assembly'] = array(
    '#type' => 'fieldset',
    '#title' => t('Genome assembly information'),
    '#attributes' => array('class' => array('assembly')),
    '#collapsible' => TRUE, // Added
    '#collapsed' => FALSE,  // Added
  );
  
  
  /*Data Source Information*/
  $form['assembly']['data_source'] = array(
    '#type' => 'fieldset',
    '#title' => t('Data source information'),
     '#attributes' => array('class' => array('assembly_data_source')),
    '#collapsible' => TRUE, // Added
    '#collapsed' => FALSE,  // Added
  ); 
  
  $form['assembly']['data_source']['geo_location'] = array(
    '#type' => 'textfield',
    '#title' => t('Geo location'),
    '#required' => FALSE,
    '#description' => "Geographical location of specimen collection (Country, Site, Latitude, Longitude)",	
  );
  $form['assembly']['data_source']['tissues_located'] = array(
    '#type' => 'textfield',
    '#title' => t('Tissues/Life stage<br> included'),	
    '#required' => FALSE,
    '#description' => "<br>(Whole individual/ antenna / pooled larva / pooled adult female/ etc.)",	
  );
  
  $gender_options = Array( '' => 'Select',
			   'Female' => 'Female',
                           'Male' 	=> 'Male', 
			   'Pooled' => 'Pooled',
			   'NA' => 'Other',
                         );
  $gender_selected = isset($form_state['values']['data_gender']) ? $form_state['values']['data_gender'] : key($gender_options);
  $form['assembly']['data_source']['gender'] = array(
    '#type' => 'select',
    '#options' => $gender_options, 
    '#title' => t('Sex'),
    '#default_value' => $gender_selected,
    '#ajax' => array(      
      'callback' => 'assembly_gender_dropdown_callback',
      'wrapper' => 'gender_textfield',
    ),
   '#limit_validation_errors' => array(),		
    '#required' => FALSE	
  );
    
  $form['assembly']['data_source']['gender_textfield'] = array(
    '#prefix' => '<div id="gender_textfield">',
    '#suffix' => '</div>',
    '#type' => 'fieldset',    
  );

  if (isset($form_state['input']['gender']) && ($form_state['input']['gender'] == 'NA')) { 	
    $form['assembly']['data_source']['gender_textfield']['other_gender'] = array(
      '#type' => 'textfield',
      '#title' => t('Other (Sex)'),	  
    );
  } 

  $form['assembly']['data_source']['data_source_strain'] = array(
      '#type' => 'textfield',
      '#title' => t('Strain')	  
  );
  
  $form['assembly']['data_source']['data_source_notes'] = array(
      '#type' => 'textfield',
      '#title' => t('Other notes')	  
  ); 
  
  $form['assembly']['data_source']['data_source_seqplatform'] = array(
      '#type' => 'textfield',
      '#title' => t('Sequencing platform and version (e.g. Illumina Hi-Seq 200 bp)'),
      '#required' => TRUE,	  
  );
  
  $form['assembly']['data_source']['data_source_url'] = array(
      '#type' => 'textfield',
      '#title' => t('Data source URL'),
      '#required' => FALSE,	  
  );
  
  $form['assembly']['info'] = array(
    '#type' => 'fieldset',
    '#title' => t('Assembly information'),
    '#attributes' => array('class' => array('aa_information')), 
    '#collapsible' => TRUE, // Added
    '#collapsed' => FALSE,  // Added
  );
  $form['assembly']['info']['assembly_name'] = array(
    '#type' => 'textfield', 
    '#title' => t('Assembly name'),    
    '#maxlength' => 255,
    '#required' => TRUE,
  );
   $form['assembly']['info']['assembly_version'] = array(
    '#type' => 'textfield', 
    '#title' => t('Assembly Version'),    
    '#maxlength' => 255,
    '#required' => TRUE,
  );
   $form['assembly']['info']['assembly_accession'] = array(
    '#type' => 'textfield', 
    '#title' => t('NCBI/INSDC Genome Assembly accession #'),    
    '#maxlength' => 255,
    '#required' => TRUE,
  );
  $form['assembly']['info']['assembly_method'] = array(
    '#type' => 'textfield', 
    '#title' => t('Analysis method'),    
	'#description' => t('program and version; can be short description or PubMedID'),
    '#maxlength' => 255,
    '#required' => TRUE,
  );
  $publish_options = Array('' => 'Select', 
			   'Yes' => 'Yes',
                           'No' => 'No'); 
  $selected = isset($form_state['values']['is_publish']) ? $form_state['values']['is_publish'] : key($publish_options);
  
  $form['assembly']['info']['is_publish'] = array(
    '#type' => 'select',
    '#options' => $publish_options, 
    '#title' => t('Is the assembly published?'),
    '#default_value' => $selected,
    '#ajax' => array(      
        'callback' => 'assembly_publish_dropdown_callback',
        'wrapper' => 'assembly_publish',
    ),		
    '#limit_validation_errors' => array(),
    '#required' => TRUE	
  );
    
  $form['assembly']['info']['assembly_publish'] = array(
    '#prefix' => '<div id="assembly_publish">',
    '#suffix' => '</div>',
    '#type' => 'fieldset',    
  );

  // Since dropdown return TRUE or FALSE, we have to check that
  // $form_state has been filled as well as what it contains.
  if (!empty($form_state['input']['is_publish']) && isset($form_state['input']['is_publish'])) {      
    $description = ($form_state['input']['is_publish'] == 'Yes')? t('please provide citation'):t('please indicate whether <a href="http://www.ncbi.nlm.nih.gov/pmc/articles/PMC3073843/?tool=pubmed" target="_BLANK">Toronto</a>/<a href="http://www.wellcome.ac.uk/stellent/groups/corporatesite/@policy_communications/documents/web_document/wtd003207.pdf" target="_BLANK">Ft. Lauderdale</a> conditions of data re-use should apply');	
    $publish_title = 'publish_field_data';	

    $form['assembly']['info']['assembly_publish'][$publish_title] = array(
      '#type' => 'textfield',
      '#title' => t('If ').$form_state['input']['is_publish'].', '.$description,
    );
  } 
  $form['assembly']['info']['other_notes'] = array(
    '#type' => 'textfield',
    '#title' => t('Other notes')	  
  );
  
  $form['upload_entry'] = array(
    '#type' => 'fieldset',
    '#title' => t('File information'),
    '#prefix' => '<div id="upload-fieldset-wrapper">',
    '#suffix' => '</div>',
    '#collapsible' => TRUE, // Added
    '#collapsed' => FALSE,  // Added
  );
  $form['upload_entry']['markup_text'] = array(
    '#prefix' => '<div id="assembly_files_markup">',
    '#markup' => t('Please enter the name and md5sum of your file(s). If you do not have an md5sum for your file, enter NA (not recommended for larger files). We will send you information on how to share the files themselves in a subsequent email.<br>'),
    '#suffix' => '</div>'
  );

  if (empty($form_state['pnum_upload'])) {
    $form_state['pnum_upload'] = 1;
  }

  for ($i = 0; $i < $form_state['pnum_upload']; $i++) {    
    //Parent container
    $form['upload_entry']['upload_wrapper'][$i] = array(
    '#prefix' => '<div class="two-col">',
    '#suffix' => '</div>'
    );
    $flag = ($i == 0)?TRUE:FALSE;
    $form['upload_entry']['upload_wrapper']['filename_'.$i] = array(
      '#type' => 'textfield',
      '#title' => 'File name',
      '#maxlength' => 255,       
      '#prefix' => '<div class="f_class">',
       	'#suffix' => '</div>',	
        '#required' => $flag,
        '#attributes' => array('multiple' => 'multiple'),
    );
    $form['upload_entry']['upload_wrapper']['md5sum_'.$i] = array(
      '#type' => 'textfield',
      '#title' => 'md5sum',
      '#prefix' => '<div class="m_class">',
      '#suffix' => '</div>',
      '#maxlength' => 255,	
      '#required' => $flag,		
      '#attributes' => array('multiple' => 'multiple'),
    );
  }

  $form['upload_entry']['add_other_uploads'] = array(
    '#type' => 'submit',
    '#value' => t('Add another file'),
    '#submit' => array('upload_add_more_add_one'),
    '#ajax' => array(
        'callback' => 'upload_add_more_callback',
        'wrapper' => 'upload-fieldset-wrapper',
    ),
    '#limit_validation_errors' => array(), // No elements will be validated
  );
  if ($form_state['pnum_upload'] > 1) {
    $form['upload_entry']['remove_other_uploads'] = array(
      '#type' => 'submit',
      '#value' => t('Remove latest one'),
      '#submit' => array('upload_remove_latest_one'),
      '#ajax' => array(
        'callback' => 'upload_add_more_callback',
	'wrapper' => 'upload-fieldset-wrapper',
      ),
      '#limit_validation_errors' => array(), // No elements will be validated
    );
  }
 
  // Enabling honeypot to avoid spam
  honeypot_add_form_protection($form, $form_state, array('honeypot', 'time_restriction'));
 /* $form['captcha'] = array(
    '#type' => 'captcha',
    '#captcha_type' => 'datasets/Math',
  );*/
 
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  
  return $form;
}

function assembly_data_validate($form, &$form_state) {  
  $values = $form_state['values'];
  //echo "<prE>"; print_r($values);echo "</prE>";exit;
  
  /*Genome co-ordinator Name & Email*/
  $name = $values['name'];
  if(!preg_match('!^[\w @-]*$!', $name)){
     form_set_error('name', t('Your Full Name can only contains numbers, letters @  - _.'));
  }
  if(!valid_email_address($values['email'])) {
    form_set_error('email', t('You must enter a valid e-mail address.'));
  }    
  
  /*NCBI TAXID numeric validation*/
  if(!empty($values['taxid']) && !is_numeric($values['taxid'])) {
    form_set_error('taxid', t('Taxid should be a number'));
  }
 
/*$taxid_result = db_query("SELECT taxid FROM public.ds_organism_assembly WHERE taxid = :taxid", array(':taxid' => $values['taxid']))->fetchObject();
  if(!empty($taxid_result->taxid) && ($taxid_result->taxid >=1) ) {
     form_set_error('taxid', t('Taxid already exists'));
  }
  */

  if(!empty($values['is_portal']) && ($values['is_portal'] == 'Yes') && empty($values['portal_yes']) && empty($values['portal_yes']) ) {
    form_set_error('portal_yes', t('Explain the reason')); 
  }
  
  /*Manual curation co-ordinator name and email  */
  if(!empty($values['is_curator_assembly']) && ($values['is_curator_assembly'] == 'Yes') && empty($values['manual_curation_name'])) {
    form_set_error('manual_curation_name', t('Co-ordinator name field is required.'));
  }
  if(!empty($values['is_curator_assembly']) && ($values['is_curator_assembly'] == 'Yes') && empty($values['manual_curation_email'])) {
    form_set_error('manual_curation_email', t('Co-ordinator email field is required.'));
  }
  
  if(isset($values['manual_curation_name']) && !empty($values['manual_curation_name']) && !preg_match('!^[\w @-]*$!', $values['manual_curation_name'])){
     form_set_error('manual_curation_name', t('Your Name can only contains numbers, letters @  - _.'));
  }
  if(isset($values['manual_curation_email']) && !empty($values['manual_curation_email']) && !valid_email_address($values['manual_curation_email'])) {
    form_set_error('manual_curation_email', t('You must enter a valid e-mail address.'));
  }
  
  /*Assistance developing an OGS Reason field*/ 
  if(!empty($values['need_assistance']) && ($values['need_assistance'] == 'Yes') && empty($values['reason'])) {
    form_set_error('reason', t('Reason field is required.')); 
  }  

  /* TIME FRAME VALIDATIONS -- validate empty End date */  
  if(!empty($values['is_curate_assembly']) && ($values['is_curate_assembly'] == 'Yes') && ($values['no_timeframe'] == 0) && !empty($values['time_from']) && is_null($values['time_to'])) {  
    form_set_error('time_to', t('End date field is required.'));
  }

  if(!empty($values['is_curate_assembly']) && ($values['is_curate_assembly'] == 'Yes') && ($values['no_timeframe'] == 0) && !empty($values['time_to']) && is_null($values['time_from'])) {
    form_set_error('time_from', t('Start date field is required.'));
  }


  if ( ($values['is_curate_assembly'] == 'Yes') && is_null($values['time_to']) && is_null($values['time_from']) && empty($values['no_timeframe'])) {
    form_set_error('time_from', t('Enter either one of the curation time frame.')); 
  }
 
  if ( ($values['is_curate_assembly'] == 'Yes') && (!empty($values['time_to']) || !empty($values['time_from'])) && !empty($values['no_timeframe'])) {
    form_set_error('time_from', t('Enter either one of the curation time frame but not both.'));
  }
 
  /*Validate End date greater than Start date*/
  if(!empty($values['time_to']) && !empty($values['time_from'])  && ($values['time_to'] < $values['time_from'])) {
    form_set_error('time_to', t('End date should be greater than Start date.'));
  }  
 
  /*Organism image URL */
  if (!empty($values['organism_image_url']) && !valid_url($values['organism_image_url'], 'TRUE')) {
    form_set_error('organism_image_url', t('You must enter a valid url.'));
  }

  
  if(!empty($values['is_publish']) && empty($values['publish_field_data'])) {
     $description = ($values['is_publish'] == 'Yes')? t('please provide citation'):t('please indicate whether <a href="http://www.ncbi.nlm.nih.gov/pmc/articles/PMC3073843/?tool=pubmed" target="_BLANK">Toronto</a>/<a href="http://www.wellcome.ac.uk/stellent/groups/corporatesite/@policy_communications/documents/web_document/wtd003207.pdf" target="_BLANK">Ft. Lauderdale</a> conditions of data re-use should apply');
    form_set_error('publish_field_data', t('The field \'If '.$values['is_publish']).' '.$description.'\' is required');
  }

  /*Data Source URL */
  if (!empty($values['data_source_url']) && !valid_url($values['data_source_url'], 'TRUE')) {
    form_set_error('data_source_url', t('You must enter a valid url.'));
  }
  //Filename and md5sum validations if they have any comma it wouldnot allow to submit the form. Only below mentioned characters and special characters and allowed.
  foreach($values as $key => $value) {
    if(preg_match('/^filename_/', $key, $match)) {
      if(!preg_match('!^[\w .-/]*$!', $value)) {
        form_set_error($key, t('Your filename can only contains numbers, letters -_.'));
      }
   
      $file = explode('_',$key);
      $file_name = 'filename_'.$file[1];
      $md5_sum = 'md5sum_'.$file[1];
     if(!empty($values[$file_name]) && empty($values[$md5_sum])) {
        form_set_error($md5_sum, t('You must enter md5sum '.($file[1]+1).'.'));
      }  
    }
    if(preg_match('/^md5sum_/', $key, $match)) {
      if(!preg_match('!^[\w .-/]*$!', $value)) {
        form_set_error($key, t('Your md5sum can only contains numbers, letters -_.'));
      }
      $md5_key = explode('_', $key);
      if(empty($values['filename_'.$md5_key[1]]) && !empty($values['md5sum_'.$md5_key[1]])) {
        form_set_error('filename_'.$md5_key[1], t('You must enter filename '.($md5_key[1]+1).'.'));
      }
    }

    if(preg_match('/^other_methods_/', $key, $match_methods)) {
      if(!preg_match('!^[\w -]*$!', $value)) {
        form_set_error($key, t('Your other methods field can only contains numbers, letters -_.'));
      }
    }
  }
}


function assembly_data_submit($form, &$form_state) {
  global $user;
  $values = $form_state['values'];  
 // echo "<pre>"; print_r($values);echo "</pre>"; exit;
  $web_apollo_organism = variable_get('web_apollo_organism');
  if(!empty($web_apollo_organism)) {
    $organism_list = get_webapollo_organisms($web_apollo_organism);
  }

  $names = Array(); $data = Array();
  $exclude_fields = Array('add_other_uploads', 'remove_other_uploads', 'submit', 'form_build_id', 'form_token', 'form_id', 'op','captcha_token','captcha_sid', 'captcha_response', 'url', 'honeypot_time','captcha');
  $filename = ''; $md5sum = '';
  foreach($values as $name => $value) {
    if(!in_array($name, $exclude_fields)) 
	{
       //echo "name ".$name." value ".$value."<br>";
	  if(preg_match('/^filename_/', $name, $match)) {
	    $filename .= check_plain($value).",";
	  } 
	  else if(preg_match('/^md5sum_/', $name, $match1)) {
	    $md5sum .= check_plain($value).",";
	  }
	  else if ( !preg_match('/^md5sum_/', $name, $match1) && !preg_match('/^filename_/', $name, $match)) {	  
            
            array_push($names, $name);            
            if ( ($name == 'time_from' || $name == 'time_to') && (!empty($value)) ) {   
	      $dd = explode('-', check_plain($value));
              $dd_format = $dd[2].'-'.$dd[1].'-'.$dd[0];
	      $value = strtotime($dd_format);
	    }
            if ( is_null($value) && (( $name == 'time_from') || ($name == 'time_to')) ) {
              $value = 0;
            }
	    array_push($data, "'".pg_escape_string(check_plain($value))."'");
	  }
 
	}	
	
  }
  $filename = rtrim($filename, ",");
  $md5sum = rtrim($md5sum, ",");
  array_push($names,'filename');
  array_push($names,'md5sum');
  array_push($names,'created');
  array_push($names, 'uid');
  array_push($data, "'".$filename."'");
  array_push($data, "'".$md5sum."'");
	
  $timestamp = time();
  array_push($data, $timestamp);
  array_push($data, $user->uid);
  $names_col = implode(',', $names);  
  $values_col = implode(',', $data);
 
// echo "insert into public.ds_organism_assembly($names_col) values($values_col)";exit;
 db_query("insert into public.ds_organism_assembly($names_col) values($values_col)");   
  
  // E-mail address of the sender: as the form field is a text field.  
  $from = FROM_ADDRESS;
  $to_address = $values['email'];
  $values['organism'] = $organism_list[$values['organism']];

//echo "param <pre>"; print_r($values);echo "</prE>";exit;
  // Send the e-mail to the recipients using the site default language.
  $sent =  drupal_mail('datasets', 'assembly_dataset_email', $to_address, language_default(), $values, $from, TRUE);

  if(empty($sent['result']) || ($sent['result'] != 1)) {
    /*handle send fail, $sent ===false when mail fails, but it won't always recognize a failure*/
    drupal_set_message(t('Failed to send e-mail.'));
  } else
    drupal_set_message(t('Your data was submitted successfully. The i5k Workspace will review your submission and send you information on how to upload your dataset as soon as possible. For your reference we are sending out an email with the fields filled.'));
  
}

/*function portal_dropdown_callback($form, $form_state) {
  return $form['project']['portal'];
}*/

function manual_curation_dropdown_callback($form, $form_state) {
  return $form['project']['manual_curation'];
}

function name_email_callback($form, $form_state) {
  return $form['project']['manual_curation']['name_email'];
}

function assistance_dropdown_callback($form, $form_state) {
  return $form['project']['manual_curation']['assistance'];
}

function species_dropdown_callback($form, $form_state) {
    return $form['project']['species'];
}

function assembly_publish_dropdown_callback($form, $form_state) {
  return $form['assembly']['info']['assembly_publish'];
}

function assembly_gender_dropdown_callback($form, $form_state) {
 return $form['assembly']['data_source']['gender_textfield'];  
}

function no_timeframe_callback($form, $form_state) {
  if ($form_state['input']['no_timeframe'] == '1') {
    $form['project']['manual_curation']['tf_condition_text']['time_from']['date']['#attributes']['disabled'] = 'disabled';
    $form['project']['manual_curation']['tf_condition_text']['time_to']['date']['#attributes']['disabled'] = 'disabled';
   }
  return $form['project']['manual_curation']['tf_condition_text'];
}

function datepopup_callback($form, $form_state) {
  if ( !empty($form_state['input']['time_to']['date']) || !empty($form_state['input']['time_from']['date'])) {
    $form['project']['manual_curation']['tf_condition']['no_timeframe']['#attributes']['disabled'] = 'disabled'; 
  }
  return $form['project']['manual_curation']['tf_condition'];
}

/**
 * gene prediction information form
 */
function gene_prediction($form, &$form_state) {
  $form['#attached']['css'] = array(
    drupal_get_path('module', 'datasets') . '/css/gene_prediction.css',
  ); 

  $form['information_markup'] = array(
    '#markup' => t('<div id="info_markup">Please note that this dataset will be visible to the public in the JBrowse genome browser. Contact us if this dataset needs to remain private.</div>'),
  );

  $web_apollo_organism = variable_get('web_apollo_organism');
  if(!empty($web_apollo_organism)) {    
    $organism_options = get_webapollo_organisms($web_apollo_organism); 
  }
   
  ksort($organism_options, 2);

  $form['organism'] = array(
    '#type' => 'select',
    '#title' => t('Organism'),
    '#options' => $organism_options,
    '#multiple' => FALSE,
    '#required' => TRUE,	
  );
 
  //Analysis Method - To make the fieldset collapsible
  $form['analysis_method'] = array(
    '#type' => 'fieldset',
    '#title' => t('Analysis Method'),
    '#collapsible' => TRUE, // Added
    '#collapsed' => FALSE  // Added
  );
     
  $form['analysis_method']['program'] = array(
    '#type' => 'textfield',
    '#preffix' => 'TEST',
    '#title' => t('Program'),	    
    '#description' => t('Program can be short description or PubMedID'),
    '#required' => TRUE	
  );
  $form['analysis_method']['version'] = array(
    '#type' => 'textfield',
    '#title' => t('version'),	
    '#description' => t('Enter \'n/a\' if no version is available or applicable'), 
    '#required' => TRUE	
  );
  $form['analysis_method']['additional_info'] = array(
    '#type' => 'textarea',
    '#title' => t('Additional Information'),	
    '#description' => t('Special settings or parameters used.'),
    '#required' => FALSE
  );
  
  $form['analysis_method']['dataset_entry'] = array(
    '#type' => 'fieldset',
    '#title' => t('Other Methods'),
    '#prefix' => '<div id="entry-fieldset-wrapper">',
    '#suffix' => '</div>',
  );

  if (empty($form_state['pnum_methods'])) {
    $form_state['pnum_methods'] = 1;
  }

  for ($i = 0; $i < $form_state['pnum_methods']; $i++) {
    $form['analysis_method']['dataset_entry']['other_methods_'.$i] = array(
		'#type' => 'textfield',
        '#title' => '',
        '#size' => 22,
        '#description' => t('Such as adapter-trimming, barcoding, QC, etc'),
        '#attributes' => array('multiple' => 'multiple'),
    );
  }

  $form['analysis_method']['dataset_entry']['add_other_methods'] = array(
    '#type' => 'submit',
    '#value' => t('Add more methods'),
    '#submit' => array('methods_add_more_add_one'),
    '#ajax' => array(
        'callback' => 'methods_add_more_callback',
        'wrapper' => 'entry-fieldset-wrapper',
    ),
    '#limit_validation_errors' => array(), // No elements will be validated
  );
  if ($form_state['pnum_methods'] > 1) {
    $form['analysis_method']['dataset_entry']['remove_other_methods'] = array(
		'#type' => 'submit',
		'#value' => t('Remove the latest method'),
		'#submit' => array('methods_remove_latest_one'),
		'#ajax' => array(
			'callback' => 'methods_add_more_callback',
			'wrapper' => 'entry-fieldset-wrapper',
		),
		'#limit_validation_errors' => array(), // No elements will be validated
	);
  } 
  
 
  // Analysis Provider - To make the fieldset collapsible
  $form['analysis_provider'] = array(
    '#type' => 'fieldset',
    '#title' => t('Analysis provider'),
    '#collapsible' => TRUE, // Added
    '#collapsed' => FALSE,  // Added
  );
  
 $form['analysis_provider']['name'] = array(
    '#type' => 'textfield', 
    '#title' => t('Full Name'),    
    '#maxlength' => 255,
    '#required' => TRUE,
  );
  
  $form['analysis_provider']['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email Address'),
    '#maxlength' => 255,
    '#required' => TRUE,
  );
  
  $form['analysis_provider']['affiliation'] = array(
    '#type' => 'textfield',
    '#title' => t('Affiliation'),
    '#required' => TRUE,
  );  
  
  // Gene set information -  To make the fieldset collapsible
  $form['gene_set'] = array(
    '#type' => 'fieldset',
    '#title' => t('Gene set information'),
    '#collapsible' => TRUE, // Added
    '#collapsed' => FALSE  // Added
  );
  
  $form['gene_set']['gene_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),	
    '#required' => TRUE	
  );
  $form['gene_set']['gene_version'] = array(
    '#type' => 'textfield',
    '#title' => t('Version'),	
    '#required' => TRUE	
  );
  $form['gene_set']['descriptive_track'] = array(
    '#type' => 'textfield',
    '#title' => t('Descriptive track name for JBrowse and Apollo'),	   
    '#description' => t('(This is how you and others will identify the track in Jbrowse and Apollo - short yet descriptive is best)'),
    '#required' => TRUE	
  );
  
  $ogs_options = Array('Yes' => 'Yes', 'No' => 'No');
  $form['gene_set']['is_ogs'] = array(
    '#type' => 'select',    
    '#title' => t('Is this an OGS?'), 
    '#options' => $ogs_options,
    '#ajax' => array(      
      'callback' => 'ogs_dropdown_callback',
       'wrapper' => 'ogs',
    ),
   '#limit_validation_errors' => array(),
    '#required' => TRUE,
  );
  $form['gene_set']['ogs'] = array(
    '#type' => 'fieldset',
    '#prefix' => '<div id="ogs">',
    '#suffix' => '</div>',	  
  );

  if(isset($form_state['input']['is_ogs']) && ($form_state['input']['is_ogs'] == 'Yes')) {
    $reason_options = Array('' => '- Select -' ,'Yes' => 'Yes', 'No' => 'No');
    $form['gene_set']['ogs']['reason'] = array(
      '#type' => 'select',    	        
      '#title' => t('Should we create gene pages for this gene set?'),
      '#options' => $reason_options,
    ); 
  } 
  
  /*************************/

  $publish_options = Array('' => 'Select',
                           'Yes' => 'Yes',
                           'No' => 'No');
  $selected = isset($form_state['values']['is_publish']) ? $form_state['values']['is_publish'] : key($publish_options);

  $form['gene_set']['is_publish'] = array(
    '#type' => 'select',
    '#options' => $publish_options,
    '#title' => t('Are the data published?'),
    '#default_value' => $selected,
    '#ajax' => array(
      'callback' => 'gene_data_publish_dropdown_callback',
      'wrapper' => 'publish',
    ),
    '#required' => TRUE
  );

  $form['gene_set']['publish'] = array(
    '#prefix' => '<div id="publish">',
    '#suffix' => '</div>',
    '#type' => 'fieldset',
  );

  // Since dropdown return TRUE or FALSE, we have to check that
  // $form_state has been filled as well as what it contains.
  if (!empty($form_state['input']['is_publish']) && isset($form_state['input']['is_publish'])) {
     $description = ($form_state['input']['is_publish'] == 'Yes')? t('please provide citation'):t('please indicate whether <a href="http://www.ncbi.nlm.nih.gov/pmc/articles/PMC3073843/?tool=pubmed" target="_BLANK">Toronto</a>/<a href="http://www.wellcome.ac.uk/stellent/groups/corporatesite/@policy_communications/documents/web_document/wtd003207.pdf" target="_BLANK">Ft. Lauderdale</a> conditions of data re-use should apply');

//    $description = ($form_state['input']['is_publish'] == 'Yes')? t('please provide citation'):t('please indicate whether Toronto/Ft. Lauderdale conditions of data re-use should apply');
    $publish_title = 'publish_field_data';
    $form['gene_set']['publish'][$publish_title] = array(
      '#type' => 'textfield',
      '#title' => t('If ').$form_state['input']['is_publish'].', '.$description,
    );
  }


/******************/

  $is_download_options = Array('Yes' => 'Yes', 'No' => 'No');
  $form['gene_set']['is_download'] = array(
    '#type' => 'select',
    '#title' => t('Should we make this file available for download in our <a href="/content/data-downloads" target="_BLANK">Data Downloads</a> section?'),
    '#options' => $ogs_options,
    '#limit_validation_errors' => array(),
    '#required' => TRUE,
  );
  
  $form['upload_entry'] = array(
    '#type' => 'fieldset',
    '#title' => t('File Information'),
    '#prefix' => '<div id="upload-fieldset-wrapper">',
    '#suffix' => '</div>',
    '#collapsible' => TRUE, // Added
    '#collapsed' => FALSE,  // Added
  );
    $form['upload_entry']['markup_text'] = array(
    '#prefix' => '<div id="files_markup">',
    '#markup' => t('Please enter the name and md5sum of your file(s). If you do not have an md5sum for your file, enter NA (not recommended for larger files). We will send you information on how to share the files themselves in a subsequent email.<br>'),
    '#suffix' => '</div>'
  );


  if (empty($form_state['pnum_upload'])) {
    $form_state['pnum_upload'] = 1;
  }

  for ($i = 0; $i < $form_state['pnum_upload']; $i++) {    
    //Parent container
    $form['upload_entry']['upload_wrapper'][$i] = array(
      '#prefix' => '<div class="two-col">',
      '#suffix' => '</div>'
    );
    $flag = ($i == 0)?TRUE:FALSE;
    $form['upload_entry']['upload_wrapper']['filename_'.$i] = array(
      '#type' => 'textfield',
      '#title' => 'Filename',
      '#maxlength' => 255,       
      '#prefix' => '<div class="f_class">',
      '#suffix' => '</div>',	
      '#required' => $flag,
      '#attributes' => array('multiple' => 'multiple'),
    );
   $form['upload_entry']['upload_wrapper']['md5sum_'.$i] = array(
      '#type' => 'textfield',
      '#title' => 'md5sum',
      '#prefix' => '<div class="m_class">',
      '#suffix' => '</div>',
      '#maxlength' => 255,	
      '#required' => $flag,		
      '#attributes' => array('multiple' => 'multiple'),
    );
  }

  $form['upload_entry']['add_other_uploads'] = array(
    '#type' => 'submit',
    '#value' => t('Add another file'),
    '#submit' => array('upload_add_more_add_one'),
    '#ajax' => array(
      'callback' => 'upload_add_more_callback',
      'wrapper' => 'upload-fieldset-wrapper',
    ),
    '#limit_validation_errors' => array(), // No elements will be validated
  );
  if ($form_state['pnum_upload'] > 1) {
	$form['upload_entry']['remove_other_uploads'] = array(
		'#type' => 'submit',
		'#value' => t('Remove latest one'),
		'#submit' => array('upload_remove_latest_one'),
		'#ajax' => array(
			'callback' => 'upload_add_more_callback',
			'wrapper' => 'upload-fieldset-wrapper',
		),
		'#limit_validation_errors' => array(), // No elements will be validated
  );
  }
  
  // Enabling honeypot to avoid spam
  honeypot_add_form_protection($form, $form_state, array('honeypot', 'time_restriction'));
  /*
  $form['captcha'] = array(
    '#type' => 'captcha',
    '#captcha_type' => 'datasets/Math',
  );
  */

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  
  
  return $form;
}

/**
 * dropdown callback
 */
function ogs_dropdown_callback($form, $form_state) {
  return $form['gene_set']['ogs'];
}

/**
 * hook_validate()
 */
function gene_prediction_validate(&$form, &$form_state) {  
  $values = $form_state['values'];
//echo "<pre>"; print_r($form_state['values']); print_r($form_state['input']); echo "</pre>";

  $name = $values['name'];
  if (!preg_match('!^[\w @-]*$!', $name)){
     form_set_error('name', t('Your Name can only contains numbers, letters @  -_.'));
  }
  if (!valid_email_address($values['email'])) {
    form_set_error('email', t('You must enter a valid e-mail address.'));
  }
  $affiliation = $values['affiliation'];
  if (!preg_match('!^[\w @-]*$!', $affiliation)){
     form_set_error('affiliation', t('Your 
	 Affiliation can only contains numbers, letters @  - _.'));
  }
 
  if(!empty($values['is_ogs']) && ($values['is_ogs'] == 'Yes') && empty($values['reason'])) {
    form_set_error('reason', t('Enter the reason OGS.'));
  }
 
  if(!empty($values['is_publish']) && empty($values['publish_field_data'])) {
     $description = ($values['is_publish'] == 'Yes')? t('please provide citation'):t('please indicate whether <a href="http://www.ncbi.nlm.nih.gov/pmc/articles/PMC3073843/?tool=pubmed" target="_BLANK">Toronto</a>/<a href="http://www.wellcome.ac.uk/stellent/groups/corporatesite/@policy_communications/documents/web_document/wtd003207.pdf" target="_BLANK">Ft. Lauderdale</a> conditions of data re-use should apply');
    form_set_error('publish_field_data', t('The field \'If '.$values['is_publish']).' '.$description.'\' is required');
  }


  foreach($values as $key => $value) {
    if(preg_match('/^filename_/', $key, $match)) {
      if(!preg_match('!^[\w .-/]*$!', $value)) {
        form_set_error($key, t('Your filename can only contains numbers, letters -_.'));
      }

      $file = explode('_',$key);
      $file_name = 'filename_'.$file[1];
      $md5_sum = 'md5sum_'.$file[1];
     if(!empty($values[$file_name]) && empty($values[$md5_sum])) {
        form_set_error($md5_sum, t('You must enter md5sum '.($file[1]+1).'.'));
      }
    }
    if(preg_match('/^md5sum_/', $key, $match)) {
      if(!preg_match('!^[\w .-/]*$!', $value)) {
        form_set_error($key, t('Your md5sum can only contains numbers, letters -_.'));
      }
      $md5_key = explode('_', $key);
      if(empty($values['filename_'.$md5_key[1]]) && !empty($values['md5sum_'.$md5_key[1]])) {
        form_set_error('filename_'.$md5_key[1], t('You must enter filename '.($md5_key[1]+1).'.'));
      }
    }

    if(preg_match('/^other_methods_/', $key, $match_methods)) {
      if(!preg_match('!^[\w -]*$!', $value)) {
        form_set_error($key, t('Your other methods field can only contains numbers, letters -_.'));
      }
    }
  }


}

/**
 * hook_submit()
 */
function gene_prediction_submit($form, &$form_state) {  
  global $user;
  $values = $form_state['values'];
  //echo "<pre>"; print_r($values); echo "</pre>";  
   $web_apollo_organism = variable_get('web_apollo_organism');
  if(!empty($web_apollo_organism)) {
    $organism_list = get_webapollo_organisms($web_apollo_organism);
  }

  /* $names_col = Array('organism','program','version','additional_info','name','email','affiliation','gene_name','gene_version',
  'descriptive_track','is_ogs','reason','other_methods','filename','md5sum','created');
  */

  $exclude_fields = Array('i5kurl', 'honeypot_time', 'add_other_methods', 'remove_other_methods', 'add_other_uploads', 'remove_other_uploads', 'submit', 'form_build_id', 'form_token', 'form_id', 'op','captcha_token','captcha_sid', 'captcha_response', 'url', 'captcha');
  $names_col = Array();  
  $values_col = Array();
  $created = time(); $other_methods = ''; $filename = ''; $md5sum = '';
  
  foreach($values as $key => $value) {
    if(!in_array($key, $exclude_fields)) {
      if(preg_match('/^other_methods_/', $key)) {              
        $other_methods .= check_plain($value).",";
      }
      else if(preg_match('/^filename_/', $key)) {
        $filename .= check_plain($value).",";
      }
      else if(preg_match('/^md5sum_/', $key)) {
        $md5sum .= check_plain($value).",";
      }
      else if(isset($value) && !empty($value)){            
       array_push($names_col, $key);
       array_push($values_col, "'".check_plain($value)."'");
      }	
    }
  }

  $other_methods = rtrim($other_methods, ',');
  $filename = rtrim($filename, ',');
  $md5sum = rtrim($md5sum, ',');
  array_push($names_col, 'other_methods');
  array_push($values_col, "'".$other_methods."'");
  array_push($names_col, 'filename');
  array_push($values_col, "'".$filename."'");
  array_push($names_col, 'md5sum');
  array_push($values_col, "'".$md5sum."'");
  array_push($names_col, 'uid');
  array_push($values_col, $user->uid);
  array_push($names_col, 'created');
  array_push($values_col, $created); 
  
  $names = implode(',', $names_col);
  $data = implode(',', $values_col);  
//echo "insert into public.ds_gene_prediction($names) values($data)";exit; 
 
  db_query("insert into public.ds_gene_prediction($names) values($data)"); 
  // E-mail address of the sender: as the form field is a text field.  
  $from = FROM_ADDRESS;
  $to_address = $values['email'];
  $values['organism'] = $organism_list[$values['organism']];

  // Send the e-mail to the recipients using the site default language.
  $sent =  drupal_mail('datasets', 'gene_prediction_email', $to_address, language_default(), $values, $from, TRUE);
  if(empty($sent['result']) || ($sent['result'] != 1)) {
    /*handle send fail, $sent ===false when mail fails, but it won't always recognize a failure*/
    drupal_set_message(t('Failed to send e-mail.'));
  } else
    drupal_set_message(t('Your gene prediction information is successfully submitted. For your reference we are sending out an email with the fields filled.'));
}

/**
 *  Registration form for project or dataset submission account
 */
function project_dataset_submission_account($form, &$form_state) {
  $form['#attached']['css'] = array(
    drupal_get_path('module', 'datasets') . '/css/project-dataset.css',
  );

  $form['information_markup'] = array(
    '#markup' => t('<div id="info_markup">Fill out this form to tell us a bit about your project or dataset. Once we\'ve reviewed your message, we will set you up with an account so you can submit your data to us.</div>'),
  );

  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Your Name'),
    '#required' => TRUE
  );
  $form['email'] = array(
    '#type' => 'textfield',
    '#title' => t('email'),
    '#required' => TRUE
  );
  $form['affiliation'] = array(
    '#type' => 'textfield',
    '#title' => t('Affiliation'),
    '#required' => TRUE
  );

  $form['content'] = array(
    '#type' => 'textarea',
    '#title' => t('Tell us about the data you want to submit or the project you want to start'),
    '#required' => TRUE
  );
 
  
  // Enabling honeypot to avoid spam
  honeypot_add_form_protection($form, $form_state, array('honeypot', 'time_restriction'));
  $form['captcha'] = array(
    '#type' => 'captcha',
    '#captcha_type' => 'datasets/Math',
  );


  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

 
  return $form;

}

/**
 *  hook_form_validate()
 */
function project_dataset_submission_account_validate($form, & $form_state) {
   $values = $form_state['values'];
   $name = $values['name'];

  if (!preg_match('!^[\w @-]*$!', $name)){
     form_set_error('name', t('Your Name can only contains numbers, letters @  -_.'));
  }

  if (!valid_email_address($values['email'])) {
    form_set_error('email', t('You must enter a valid e-mail address.'));
  }


  $check_name_unique = db_select('ds_project_dataset_account')->fields('ds_project_dataset_account', array('psid'))->condition('name', db_like($values['name']), 'LIKE')->range(0, 1)->execute()->fetchField();
  if (!empty($check_name_unique)) {
    form_set_error('name', t('The name %name is already taken.', array('%name' => $values['name'])));
  }


  $check_email_unique =  db_select('ds_project_dataset_account')->fields('ds_project_dataset_account', array('psid'))->condition('email', db_like($values['email']), 'LIKE')->range(0, 1)->execute()->fetchField();
  if (!empty($check_email_unique)) {
    form_set_error('email', t('The e-mail address %email is already taken.', array('%email' => $values['email']))); 
  }

  $affiliation = $values['affiliation'];
  if (!preg_match('!^[\w @-]*$!', $affiliation)){
     form_set_error('affiliation', t('Your
         Affiliation can only contains numbers, letters @  - _.'));
  }

}

/**
 * hook_form_submit()
 */
function project_dataset_submission_account_submit($form, & $form_state) {
  $values = $form_state['values'];
  // echo "<pre>"; print_r($values);echo "</pre>";

  $created = time();
  // data variable is used to send values to mail message
  $data = Array(
        'name' => check_plain($values['name']),
        'email' => check_plain($values['email']),
        'affiliation' => check_plain($values['affiliation']),
        'content' => check_plain($values['content']),
        'created' => $created
      );

  // drupal_write_record('ds_request_project', $data);
  $result = db_insert('ds_project_dataset_account')->fields($data)->execute() or die("Unable to insert data");
  if($result > 0) {
    // E-mail address of the sender: as the form field is a text field.
    $from = $values['email'];
    $to_address = FROM_ADDRESS;

    // Send the e-mail to the recipients using the site default language.
    $sent =  drupal_mail('datasets', 'register_project_submission_account', $to_address, language_default(), $values, $from, TRUE);

    if(empty($sent['result']) || ($sent['result'] != 1)) {
      /*handle send fail, $sent ===false when mail fails, but it won't always recognize a failure*/
      drupal_set_message(t('Failed to send e-mail.'));
    } else
      drupal_set_message(t('Thanks for registering for project or data submission account. Once we\'ve reviewed your data, we will set you up with an account so you can submit your data to us.'));
    }
}

/**
 * Assembly information view
 */
function assembly_information_view($oa_id) {
  // Select table
  $query = db_select('ds_organism_assembly', 'os');
  // Select fields
  $query->fields("os");
  // Condition
  $query->condition("oa_id", $oa_id);    
  
  // Execute query
  $result = $query->execute()->fetchAll();  
 
  // Now build the form array
  $web_apollo_organism = variable_get('web_apollo_organism');
  $organism_data = get_webapollo_organisms($web_apollo_organism); 
  $result[0]->organism = $organism_data[$result[0]->organism];

  $output = theme('assembly_information_view', array('data' => $result));
  
  return $output;
}

/**
 * Gene Prediction view
 */
function gene_prediction_view($pid) {
  // Select table
  $query = db_select('ds_gene_prediction', 'p');
  // Select fields
  $query->fields("p");
  // Condition
  $query->condition("pid", $pid);

  // Execute query
  $result = $query->execute()->fetchAll();

  // Now build the form array
  $web_apollo_organism = variable_get('web_apollo_organism');
  $organism_data = get_webapollo_organisms($web_apollo_organism);
  $result[0]->organism = $organism_data[$result[0]->organism];
  
  $output = theme('gene_prediction_view', array('data' => $result));

  return $output;
}

/**
 * Mapped dataset view
 */
function mapped_dataset_view($id) {
  // Select table
  $query = db_select('ds_mapped_dataset', 'm');
  // Select fields
  $query->fields("m");
  // Condition
  $query->condition("id", $id);

  // Execute query
  $result = $query->execute()->fetchAll();

  // Now build the form array
  $web_apollo_organism = variable_get('web_apollo_organism');
  $organism_data = get_webapollo_organisms($web_apollo_organism);
  $result[0]->organism = $organism_data[$result[0]->organism];
  
  $output = theme('mapped_dataset_view', array('data' => $result));

  return $output;
}

function theme_datasets_table($variables) {
  $header = $variables['header'];
  $rows = $variables['rows'];
  $attributes = $variables['attributes'];
  $caption = $variables['caption'];
  $colgroups = $variables['colgroups'];
  $sticky = $variables['sticky'];
  $empty = $variables['empty'];

  // Add sticky headers, if applicable.
  if (count($header) && $sticky) {
    drupal_add_js('misc/tableheader.js');
    // Add 'sticky-enabled' class to the table to identify it for JS.
    // This is needed to target tables constructed by this function.
    $attributes['class'][] = 'sticky-enabled';
  }

  $output = '<table' . drupal_attributes($attributes) . ">\n";

  if (isset($caption)) {
    $output .= '<caption>' . $caption . "</caption>\n";
  }

  // Format the table columns:
  if (count($colgroups)) {
    foreach ($colgroups as $number => $colgroup) {
      $attributes = array();

      // Check if we're dealing with a simple or complex column
      if (isset($colgroup['data'])) {
        foreach ($colgroup as $key => $value) {
          if ($key == 'data') {
            $cols = $value;
          }
          else {
            $attributes[$key] = $value;
          }
        }
      }
      else {
        $cols = $colgroup;
      }

      // Build colgroup
      if (is_array($cols) && count($cols)) {
        $output .= ' <colgroup' . drupal_attributes($attributes) . '>';
        $i = 0;
        foreach ($cols as $col) {
          $output .= ' <col' . drupal_attributes($col) . ' />';
        }
        $output .= " </colgroup>\n";
      }
      else {
        $output .= ' <colgroup' . drupal_attributes($attributes) . " />\n";
      }
    }
  }

  // Add the 'empty' row message if available.
  if (!count($rows) && $empty) {
    $header_count = 0;
    foreach ($header as $header_cell) {
      if (is_array($header_cell)) {
        $header_count += isset($header_cell['colspan']) ? $header_cell['colspan'] : 1;
      }
      else {
        $header_count++;
      }
    }
    $rows[] = array(array('data' => $empty, 'colspan' => $header_count, 'class' => array('empty', 'message')));
  }

  // Format the table header:
  if (count($header)) {
    $ts = tablesort_init($header);
    // HTML requires that the thead tag has tr tags in it followed by tbody
    // tags. Using ternary operator to check and see if we have any rows.
    $output .= (count($rows) ? ' <thead><tr>' : ' <tr>');
    foreach ($header as $cell) {

      //VIJAYA - CHANGED BELOW 2 LINES OF CODE HERE
      // $cell = tablesort_header($cell, $header, $ts);
      $ts['org'] = isset($_POST['organism'])?$_POST['organism']:$_GET['organism'];
      $cell = ds_tablesort_header($cell, $header, $ts);

      $output .= _theme_table_cell($cell, TRUE);
    }
    // Using ternary operator to close the tags based on whether or not there are rows
    $output .= (count($rows) ? " </tr></thead>\n" : "</tr>\n");
  }
  else {
    $ts = array();
  }

  // Format the table rows:
  if (count($rows)) {
    $output .= "<tbody>\n";
    $flip = array('even' => 'odd', 'odd' => 'even');
    $class = 'even';
    foreach ($rows as $number => $row) {
      // Check if we're dealing with a simple or complex row
      if (isset($row['data'])) {
        $cells = $row['data'];
        $no_striping = isset($row['no_striping']) ? $row['no_striping'] : FALSE;

        // Set the attributes array and exclude 'data' and 'no_striping'.
        $attributes = $row;
        unset($attributes['data']);
        unset($attributes['no_striping']);
      }
      else {
        $cells = $row;
        $attributes = array();
        $no_striping = FALSE;
      }
      if (count($cells)) {
        // Add odd/even class
        if (!$no_striping) {
          $class = $flip[$class];
          $attributes['class'][] = $class;
        }

        // Build row
        $output .= ' <tr' . drupal_attributes($attributes) . '>';
        $i = 0;
        foreach ($cells as $cell) {
          $cell = tablesort_cell($cell, $header, $ts, $i++);
          $output .= _theme_table_cell($cell);
        }
        $output .= " </tr>\n";
      }
    }
    $output .= "</tbody>\n";
  }

  $output .= "</table>\n";
  return $output;
}

/**
 *  VIJAYA -  Overriding theme for tablesort_header
 */
function ds_tablesort_header($cell, $header, $ts) {
  // Special formatting for the currently sorted column header.
  if (is_array($cell) && isset($cell['field'])) {
    $title = t('sort by @s', array('@s' => $cell['data']));
    if ($cell['data'] == $ts['name']) {
      $ts['sort'] = (($ts['sort'] == 'asc') ? 'desc' : 'asc');
      $cell['class'][] = 'active';
      $image = theme('tablesort_indicator', array('style' => $ts['sort']));
    }
    else {
      // If the user clicks a different header, we want to sort ascending initially.
      $ts['sort'] = 'asc';
      $image = '';
    }
    //VIJAYA - CHANGED BELOW LINE   
    $cell['data'] = l($cell['data'] . $image, $_GET['q'], array('attributes' => array('title' => $title), 'query' => array_merge($ts['query'], array('sort' => $ts['sort'], 'order' => $cell['data'],'organism' => $ts['org'])), 'html' => TRUE));

    unset($cell['field'], $cell['sort']);
  }
  return $cell;
}

/**
 *  Implementation of hook_theme().
 */
function datasets_theme() {
  $core_path = drupal_get_path('module', 'datasets');
   //$path = 'themes/templates/';
  return array(
    'datasets_organism_approval' => array(
      'template' => 'datasets_organism_approval',
      'render element' => 'form',
      'path' => $core_path."/theme/templates",
    ),	
    'assembly_information_view' => array(
      'template' => 'assembly_information_view',
      'path' => $core_path."/theme/templates",
      'variables' => array('data' => NULL),
    ),
    'gene_prediction_view' => array(	  
      'template' => 'gene_prediction_view',
      'path' => $core_path."/theme/templates",	
      'variables' => array('data' => NULL),	  
    ),	
    'mapped_dataset_view' => array(
      'template' => 'mapped_dataset_view',
      'path' => $core_path."/theme/templates",
      'variables' => array('data' => NULL),
    ),	
   'datasets_table' => array(
      'variables' => array('header' => NULL, 'rows' => NULL, 'attributes' => array(), 'caption' => NULL, 'colgroups' => array(), 'sticky' => TRUE, 'empty' => ''),
    ),
  );
}
